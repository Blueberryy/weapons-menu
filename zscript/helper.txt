class WMZscriptHelper : Actor
{
  static void TellAmmo(Actor activator, string weaponClass, bool showSecond)
  {
    if (!activator || !activator.player)
    {
      SendResult(activator, "");
      return;
    }

    Weapon w = Weapon(activator.FindInventory(weaponClass));
    if (!w)
    {
      SendResult(activator, "");
      return;
    }

    string message = "";

    Ammo amm1 = w.Ammo1;
    if (amm1)
    {
      message = String.Format("(%d/%d)", amm1.amount, amm1.maxAmount);
    }

    Ammo amm2 = w.Ammo2;
    if (showSecond && amm2 && amm1 != amm2)
    {
      message = String.Format("%s (%d/%d)", message, amm2.amount, amm2.maxAmount);
    }

    SendResult(activator, message);
  }

  static void IsWeaponReady(Actor activator, string weaponClass)
  {
    PlayerPawn p = PlayerPawn(activator);
    bool isReady = (p.player.WeaponState & WF_WEAPONREADY)
      || (p.player.WeaponState & WF_WEAPONREADYALT);
    CVar messageCVar = CVar.GetCVar("M8fWeaponMenuWeaponReady", activator.player);
    messageCVar.SetInt(isReady);
  }

  static void IsWeaponDeselectable(Actor activator, string weaponClass)
  {
    PlayerPawn p = PlayerPawn(activator);
    bool isReady = p.player.WeaponState & WF_WEAPONSWITCHOK;
    CVar messageCVar = CVar.GetCVar("M8fWeaponMenuWeaponReady", activator.player);
    messageCVar.SetInt(isReady);
  }

  static void FireWeapon(Actor activator, string weaponClass)
  {
    if (!activator || !activator.player) { return; }

    PlayerPawn p = PlayerPawn(activator);
    p.FireWeapon(null);
  }

  static void FireWeaponAlt(Actor activator, string weaponClass)
  {
    if (!activator || !activator.player) { return; }

    PlayerPawn p = PlayerPawn(activator);
    p.FireWeaponAlt(null);
  }

  static void HolsterWeapon(Actor activator)
  {
    if (!activator || !activator.player) { return; }

    activator.player.PendingWeapon = null;
  }

  static void GetInventoryList(Actor activator)
  {
    if (!activator || !activator.player) { return; }

    string inventoryContents = "";
    for (let inv = activator.player.mo.Inv; inv; inv = inv.Inv)
    {
      // [argv] look through the player pawn's inventory for weapons
      if (inv.bINVBAR)
      {
        string className = inv.GetClassName();
        string tag       = inv.GetTag();
        int amount       = inv.Amount;
        if (amount > 0)
        {
          inventoryContents.AppendFormat("%s>%s> [%d]>", className, tag, amount);
        }
        else
        {
          inventoryContents.AppendFormat("%s>%s>>", className, tag);
        }
      }
    }

    SendResult(activator, inventoryContents);
  }

  static void GetWeaponList(Actor activator)
  {
    PlayerInfo player = activator.player;
    if (!activator || !player) { return; }

    string weaponData = "";
    int nClasses = AllActorClasses.Size();

    for (int i = 0; i < nClasses; ++i)
    {
      let type = (class<Weapon>)(AllActorClasses[i]);
      if (type != null && type != "Weapon")
      {
        let rep = GetReplacement(type);
        // Don't give replaced weapons unless the replacement was done by Dehacked.
        if (rep == type || rep is "DehackedPickup")
        {
          // List the weapon only if it is set in a weapon slot.
          int slot;
          int located;
          int priority;
          [located, slot, priority] = player.weapons.LocateWeapon(type);
          if (located)
          {
            readonly<Weapon> def = GetDefaultByType(type);
            string tag           = def.GetTag();
            string className     = type.GetClassName();
            weaponData.AppendFormat("%s>%s>%d>%d>", className, tag, slot, priority);
          }
        }
      }
    }

    SendResult(activator, weaponData);
  }

  static void SendResult(Actor a, string result)
  {
    CVar messageCVar = CVar.GetCVar("M8fWeaponMenuAmmoInformerResult", a.player);
    messageCVar.SetString(result);
  }

  static void SetZoomFactor(Actor activator, double zoom)
  {
    let player = activator.player;
    if (!activator || !player) { return; }

    zoom = 1 / clamp(zoom, 0.1, 50.0);
    player.ReadyWeapon.FOVScale = zoom;
  }

  static void GiveThisAmmo(Actor activator, string weaponClass)
  {
    if (!activator || !activator.player) { return; }

    Weapon w = Weapon(activator.FindInventory(weaponClass));
    if (!w) { return; }

    Ammo amm1 = w.Ammo1;
    Ammo amm2 = w.Ammo2;
    if (amm1) { activator.GiveInventory(amm1.GetClassName(), 10); }
    if (amm2) { activator.GiveInventory(amm2.GetClassName(), 10); }
  }

  static void GiveMinAmmo(Actor activator, string weaponClass)
  {
    if (!activator || !activator.player) { return; }

    Weapon w = Weapon(activator.FindInventory(weaponClass));
    if (!w) { return; }

    Ammo amm1 = w.Ammo1;
    int use = w.AmmoUse1;
    if (amm1) { activator.GiveInventory(amm1.GetClassName(), use); }
  }
}
