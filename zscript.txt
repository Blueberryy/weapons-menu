version "3.2.5"

class WMInstaSwitcher : CustomInventory
{
  States
  {
    Pickup:
      TNT1 A 0 SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
  }
}

class WMWeaponStub : Pistol
{
  Default
  {
    Weapon.SelectionOrder 0;
  }

  States
  {
    Ready:
      TNT1 A 1 A_WeaponReady;
      loop;
    Deselect:
        TNT1 A 1 A_Lower;
        Loop;
     Select:
        TNT1 A 1 A_Raise;
        Loop;
  }
}

class WMZscriptHelper : Actor
{
  static void TellAmmo(Actor activator, string weaponClass, bool showSecond)
  {
    CVar messageCVar =  CVar.GetCVar("M8fWeaponMenuAmmoInformerResult", activator.player);

    if (!activator || !activator.player)
    {
      messageCVar.SetString("");
      return;
    }

    Weapon w = Weapon(activator.FindInventory(weaponClass));
    if (!w)
    {
      messageCVar.SetString("");
      return;
    }

    string message = "";

    Ammo amm1 = w.Ammo1;
    if (amm1)
    {
      message = String.Format("(%d/%d)", amm1.amount, amm1.maxAmount);
    }

    Ammo amm2 = w.Ammo2;
    if (showSecond && amm2 && amm1 != amm2)
    {
      message = String.Format("%s (%d/%d)", message, amm2.amount, amm2.maxAmount);
    }

    messageCVar.SetString(message);
  }

  static void IsWeaponReady(Actor activator, string weaponClass)
  {
    PlayerPawn p = PlayerPawn(activator);
    bool isReady = p.player.WeaponState & WF_WEAPONREADY;
    CVar messageCVar = CVar.GetCVar("M8fWeaponMenuWeaponReady", activator.player);
    messageCVar.SetInt(isReady);
  }

  static void IsWeaponDeselectable(Actor activator, string weaponClass)
  {
    PlayerPawn p = PlayerPawn(activator);
    bool isReady = p.player.WeaponState & WF_WEAPONSWITCHOK;
    CVar messageCVar = CVar.GetCVar("M8fWeaponMenuWeaponReady", activator.player);
    messageCVar.SetInt(isReady);
  }

  static void FireWeapon(Actor activator, string weaponClass)
  {
    if (!activator || !activator.player) { return; }

    PlayerPawn p = PlayerPawn(activator);
    p.FireWeapon(null);
  }

  static void FireWeaponAlt(Actor activator, string weaponClass)
  {
    if (!activator || !activator.player) { return; }

    PlayerPawn p = PlayerPawn(activator);
    p.FireWeaponAlt(null);
  }

  static void HolsterWeapon(Actor activator)
  {
    if (!activator || !activator.player) { return; }

    activator.player.PendingWeapon = null;
  }

  static void GetInventoryList(Actor activator)
  {
    if (!activator || !activator.player) { return; }

    string inventoryContents = "";
    for (let inv = activator.player.mo.Inv; inv; inv = inv.Inv)
    {
      // [argv] look through the player pawn's inventory for weapons
      if (inv.bINVBAR)
      {
        int amount = inv.Amount;
        inventoryContents.AppendFormat("%s>%s>%d>", inv.GetClassName(), inv.GetTag(), amount);
      }
    }

    CVar messageCVar =  CVar.GetCVar("M8fWeaponMenuAmmoInformerResult", activator.player);
    messageCVar.SetString(inventoryContents);
  }
}

class WM_PuffBase : Actor
{
  Default
  {
    Mass 0;
    Radius 1;
    Height 2;
    +NOBLOCKMAP;
    +NOGRAVITY;
    +BLOODLESSIMPACT;
    +PUFFONACTORS;
    +DONTSPLASH;
    +NOTRIGGER;
    +FORCEXYBILLBOARD;
  }

  States
    {
    Spawn:
      TNT1 A 0;
      WDOB A 1 BRIGHT;
      Stop;
    }
}

class WM_Laser0 : WM_PuffBase {States { Spawn: TNT1 A 0; WDO0 A 1 BRIGHT; Stop; }}
class WM_Laser1 : WM_PuffBase {States { Spawn: TNT1 A 0; WDO1 A 1 BRIGHT; Stop; }}
class WM_Laser2 : WM_PuffBase {States { Spawn: TNT1 A 0; WDO2 A 1 BRIGHT; Stop; }}
class WM_Laser3 : WM_PuffBase {States { Spawn: TNT1 A 0; WDO3 A 1 BRIGHT; Stop; }}
class WM_Laser4 : WM_PuffBase {States { Spawn: TNT1 A 0; WDO4 A 1 BRIGHT; Stop; }}

class WM_InvisiblePuff : WM_PuffBase {States {Spawn: TNT1 A 0; Stop;}}
