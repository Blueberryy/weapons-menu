#library "LIBWEAPONMENU"
#include "zcommon.acs"

#include "data.acs"

#define messageIdStart   191919
#define msgIdWeapon      messageIdStart
#define msgIdSlot        messageIdStart + MAX_WEAPONS_NUMBER
#define msgIdSelected    messageIdStart + MAX_WEAPONS_NUMBER * 2
#define msgIdHighlighted messageIdStart + MAX_WEAPONS_NUMBER * 2 + 1
#define msgIdError       messageIdStart + MAX_WEAPONS_NUMBER * 2 + 2
#define msgIdAmmo        messageIdStart + MAX_WEAPONS_NUMBER * 2 + 3
#define msgIdTag         messageIdStart + MAX_WEAPONS_NUMBER * 2 + 4

#define ERROR_NOT_FOUND  -1
// numbers [-1, -9] are reserved for error codes

#define WEAPON_HOLSTERED -10

// Global variables ////////////////////////////////////////////////////////////
// To write to global variables, use only special functions.

#define STATE_UNINITIALIZED  0
#define STATE_TERMINATED     1
#define STATE_ENABLED        2
#define STATE_CLOSED         3
#define STATE_OPENED         4
#define STATE_INVENTORY      5
#define STATE_CLOSED_VISIBLE 6
//
// (UNINITIALIZED) -titlemap-> [TERMINATED]
// (UNINITIALIZED) -always-open-> OPENED
// (UNINITIALIZED) --> CLOSED
//
// CLOSED -open->  OPENED
// OPENED -close-> CLOSED
// OPENED -close-and-always-open-> CLOSED_VISIBLE
//
// CLOSED -open-inventory-> INVENTORY
// OPENED -open-inventory-> INVENTORY
int globalState = 0;

// Global variables. Must be used only in enabled states.

// cached variables. Their values don't change during the game.
int  currentSet;
int  weaponCount;
int  step;
bool isDoom1;
bool isDoom2;

int  highlightedWeapon;
int  selectedWeapon;
str  lastUsedWeapon;

bool selectedWatchEnabled = true;

bool isInInventory[MAX_WEAPONS_NUMBER];

int zoomFactor = 1.0;
bool isZoomed;

// Inventory variables section /////////////////////////////////////////////////

int nInventoryItems;

#define N_INVENTORY_ITEMS 250

str inventoryClasses[N_INVENTORY_ITEMS];
str inventoryNames  [N_INVENTORY_ITEMS];

// Get status section //////////////////////////////////////////////////////////

function bool IsTerminated(void) { return globalState == STATE_TERMINATED; }
function bool IsOpened(void)     { return globalState == STATE_OPENED; }
function bool IsInventory(void)  { return globalState == STATE_INVENTORY; }
function bool IsVisible(void)    { return globalState == STATE_OPENED || globalState == STATE_CLOSED_VISIBLE; }

function bool IsAlwaysShow(void)
{
  int playerN     = PlayerNumber();
  bool alwaysShow = GetUserCVar(playerN, "M8fWeaponMenuAlwaysShow");
  return alwaysShow;
}

function int WM_GetInitialState(void)
{
  if (WM_IsTitlemap()) { return STATE_TERMINATED; }

  currentSet = WM_GetWeaponSet();

  return STATE_ENABLED;
}

// Global state must be changed only with this function.
function void WM_ChangeState(int newState)
{
  if (newState == globalState)
  {
    return;
  }

  WM_LeaveState(globalState);
  WM_EnterState(newState);
}

function void WM_LeaveState(int oldState)
{
  // leave previous state
  switch (oldState)
    {
    case STATE_UNINITIALIZED:  WM_LeaveUninitialized(); break;
    case STATE_TERMINATED:     WM_LeaveTerminated();    break;
    case STATE_Enabled:        WM_LeaveEnabled();       break;
    case STATE_CLOSED:         WM_LeaveClosed();        break;
    case STATE_OPENED:         WM_LeaveOpened();        break;
    case STATE_INVENTORY:      WM_LeaveInventory();     break;
    case STATE_CLOSED_VISIBLE: WM_LeaveClosedVisible(); break;
    }
}

function void WM_EnterState(int newState)
{
  globalState = newState;
  WM_SetCVar(true, "M8fWeaponMenuIsEnabled");
  WM_SetCVar(IsOpened() || IsInventory(), "M8fWeaponMenuIsOpened");

  switch (newState)
    {
    case STATE_UNINITIALIZED:  WM_EnterUninitialized(); break;
    case STATE_TERMINATED:     WM_EnterTerminated();    break;
    case STATE_Enabled:        WM_EnterEnabled();       break;
    case STATE_CLOSED:         WM_EnterClosed();        break;
    case STATE_OPENED:         WM_EnterOpened();        break;
    case STATE_INVENTORY:      WM_EnterInventory();     break;
    case STATE_CLOSED_VISIBLE: WM_EnterClosedVisible(); break;
    }
}

function void WM_LeaveUninitialized(void)
{
  if (currentSet == FALLBACK_SET)
  {
    WM_GetFallbackWeapons();
    WM_UpdateIsInInventory();
  }
}

function void WM_LeaveTerminated(void) {}
function void WM_LeaveEnabled(void) {}
function void WM_LeaveClosed(void) {}

function void WM_LeaveOpened(void)
{
  WM_MaybeToggleSlomoOnClose();
  WM_ClearScreen();
}

function void WM_LeaveInventory(void)
{
  WM_PlaySwitchSound();
  WM_ClearScreen();
}

function void WM_LeaveClosedVisible(void) {}

function void WM_EnterUninitialized(void) {}

function void WM_EnterTerminated(void) {}

function void WM_EnterEnabled(void)
{
  weaponCount = weaponCounts[currentSet];
  step        = WM_IfThenElse((weaponCount < 20), 0.05, 0.02);
  isDoom1     = WM_IsDoom1();
  isDoom2     = WM_IsDoom2();

  WM_SetSelectedWeapon(WM_FindRealSelectedWeapon());
  WM_SetHighlightedWeapon(selectedWeapon);

  int playerN = PlayerNumber();
  lastUsedWeapon = GetUserCVarString(playerN, "m8f_wm_LastUsedWeapon");
  if (!CheckInventory(lastUsedWeapon))
  {
    WM_SetLastUsedWeapon(WM_GetWeaponName(selectedWeapon));
  }

  WM_SetupAddons();
  WM_UpdateIsInInventory();
  WM_InitApiCvars();
  WM_FillInventoryItems();

  if (IsAlwaysShow()) { WM_ChangeState(STATE_CLOSED_VISIBLE); }
  else                { WM_ChangeState(STATE_CLOSED); }
}

function void WM_EnterClosed(void)
{
  if (highlightedWeapon != selectedWeapon)
  {
    WM_SelectWeapon(highlightedWeapon, true);
  }

  if (IsAlwaysShow())
  {
    WM_ChangeState(STATE_CLOSED_VISIBLE);
  }
}

function void WM_EnterOpened(void)
{
  WM_MaybeToggleSlomoOnOpen();
  WM_UpdateIsInInventory();
  WM_UpdateMenu();
}

function void WM_EnterInventory(void)
{
  WM_SetHighlightedWeapon(WM_FindRealSelectedWeapon());
  WM_PlaySwitchSound();
  WM_PrintInventoryMenu();
}

function void WM_EnterClosedVisible(void)
{
  WM_UpdateIsInInventory();
  WM_UpdateMenu();
}

function bool WM_IsHiddenWeapon(int wNumber)
{
  switch (currentSet)
  {

    // hide vanilla doom SSG in Doom 1
  case 0: return (wNumber == 3 && isDoom1);

    // Smooth Doom Rifle
  case  1: return (wNumber == 2);

    // Chex Quest: Super Large Zorcher is deathmatch-only
  case 19: return (wNumber == 3);

    // Parkour
  case 25: return (wNumber == 2 || wNumber == 10 || wNumber == 11);

    // Brutal Doom
  case 28: return (wNumber == 3 || wNumber == 9);

    // Combined Arms
  case 31: return (wNumber == 9 || wNumber == 10 || wNumber == 11);

    // Accessories to Murder
  case 41: return (wNumber == 2 || wNumber == 3);

    // DoomRL Arsenal
  case 42: return true;

    // High Noon Drifter:
  case 43:
    if (wNumber == 10) return true; // Double whips
    // Single SMG when Second SMG is acquired:
    if (wNumber ==  6 && WM_IsInInventory(5)) return true;
    if (wNumber ==  5) return true; // Double SMG
    return false;

    // X-Weapon
  case 45:
    if (wNumber == 27 || wNumber == 28) return true;
    if (wNumber ==  4 && WM_IsInInventory( 2)) return true;
    if (wNumber ==  8 && WM_IsInInventory( 7)) return true;
    if (wNumber == 11 && WM_IsInInventory(10)) return true;
    if (wNumber == 14 && WM_IsInInventory(13)) return true;
    if (wNumber == 17 && WM_IsInInventory(16)) return true;
    if (wNumber == 20 && WM_IsInInventory(19)) return true;
    if (wNumber == 24 && WM_IsInInventory(23)) return true;
    if (wNumber ==  2) return true;
    if (wNumber ==  3) return true;
    if (wNumber ==  7) return true;
    if (wNumber == 10) return true;
    if (wNumber == 13) return true;
    if (wNumber == 16) return true;
    if (wNumber == 19) return true;
    if (wNumber == 22) return true;
    return false;

    // Doom Delta
  case 47: return (wNumber == 8);

    // Factotum
  case 49:
    if (wNumber == 2 && WM_IsInInventory(1)) return true;
    if (wNumber == 6 && WM_IsInInventory(5)) return true;
    if (wNumber == 1) return true;
    if (wNumber == 5) return true;
    return false;

    // Flakes Doom
  case 50: return true; // TODO: make game detection and hide weapons properly

  }

  return false;
}


// Weapon data access functions ////////////////////////////////////////////////

function int WM_GetWeaponSlot(int weaponNumber)
{
  return slots[currentSet][weaponNumber];
}

function str WM_GetWeaponName(int weaponNumber)
{
  return names[currentSet][weaponNumber];
}

function str WM_GetPrintableWeaponName(int weaponNumber)
{
  return tags[currentSet][weaponNumber];
}

function str WM_GetWeaponTag(int weaponNumber)
{
  return tags[currentSet][weaponNumber];
}

// Returns weaponNumber of next weapon in this slot, or -1 if there is no more
// weapons in this slot.
function int WM_GetWeaponSibling(int weaponNumber)
{
  int thisWeaponSlot = WM_GetWeaponSlot(weaponNumber);

  int playerN = PlayerNumber();
  int cycleValue = GetUserCVar(playerN, "M8fWMCycle");
  bool cycle = (cycleValue <= 1) && (cycleValue != 0);

  if (!cycle)
  {
    int next = weaponNumber + 1;
    if (next >= weaponCount) { return ERROR_NOT_FOUND; }
    int nextSlot = WM_GetWeaponSlot(next);
    if (nextSlot != thisWeaponSlot) { return ERROR_NOT_FOUND; }
    return next;
  }

  for (int i = 0; i < weaponCount; ++i)
  {
    int w = (weaponNumber + i) % weaponCount;
    if (w != weaponNumber && WM_GetWeaponSlot(w) == thisWeaponSlot)
    {
      return w;
    }
  }

  return ERROR_NOT_FOUND;
}

function int WM_GetWeaponBySlotInInv(int slotNumber)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    if (slotNumber == WM_GetWeaponSlot(i))
      if (CheckInventory(WM_GetWeaponName(i)))
    {
      return i;
    }
  }

  return ERROR_NOT_FOUND;
}

function bool WM_IsOnlyInSlot(int weaponNumber)
{
  int slot = WM_GetWeaponSlot(weaponNumber);

  for (int prev = weaponNumber - 1; prev >= 0; --prev)
  {
    if (WM_GetWeaponSlot(prev) == slot)
      if (CheckInventory(WM_GetWeaponName(prev)))
        { return false; }
  }

  for (int next = weaponNumber + 1; next < weaponCount; ++next)
  {
    if (WM_GetWeaponSlot(next) == slot)
      if (CheckInventory(WM_GetWeaponName(next)))
        { return false; }
  }

  return true;
}

// Printing Weapons Menu functions /////////////////////////////////////////////

function void WM_UpdateMenu(void)
{
  WM_ClearScreen();
  if (IsVisible()) { WM_PrintMenu(); }
}

function void WM_ClearScreen(void)
{
  int id  = msgIdWeapon;
  int end = msgIdWeapon;
  if (nInventoryItems > weaponCount) { end += weaponCount; }
  else                               { end += nInventoryItems; }

  do // when menu is disabled, weapon count is 0, so always clear first message.
  {
    HudMessage(s:""; HUDMSG_PLAIN, id, 0, 0, 0, 0);
    ++id;
  } while (id < end);

  // clear slots numbers
  end = msgIdWeapon + MAX_WEAPONS_NUMBER + weaponCount;
  for (id = msgIdWeapon + MAX_WEAPONS_NUMBER; id < end; ++id)
  {
    HudMessage(s:""; HUDMSG_PLAIN, id, 0, 0, 0, 0);
  }

  HudMessage(s:""; HUDMSG_PLAIN, msgIdSelected,    0, 0, 0, 0);
  HudMessage(s:""; HUDMSG_PLAIN, msgIdHighlighted, 0, 0, 0, 0);
}

function void WM_PrintMenu(void)
{
  int playerN = PlayerNumber();
  bool disableOutput = GetUserCVar(playerN, "M8fWeaponMenuDisableNativeOutput");
  if (disableOutput) { return; }

  WM_SetupFont();

  int availableWeaponColor    = GetUserCVar(playerN, "M8FAvailableWeaponColor");
  int notAvailableWeaponColor = GetUserCVar(playerN, "M8FNotAvailableWeaponColor");
  int highlightedWeaponColor  = GetUserCVar(playerN, "M8FHighlightedWeaponColor");
  int selectedWeaponColor     = GetUserCVar(playerN, "M8FSelectedWeaponColor");

  bool showNotAvailable;
  if (currentSet == FALLBACK_SET) { showNotAvailable = false; }
  else { showNotAvailable = GetUserCVar(playerN, "M8FShowNotAvailable"); }

  bool highToLow      = GetUserCVar(playerN, "M8FWeaponMenuHighToLow");
  int  ammoMode       = GetUserCVar(playerN, "M8fWeaponMenuShowAmmoCounts");
  int  displayMode    = GetUserCVar(playerN, "m8f_wm_DisplayMode");
  int  y              = GetUserCVar(playerN, "M8FWeaponMenuYStart");
  int  stepMultiplier = GetUserCVar(playerN, "M8FWeaponMenuStepMultiplier");
  int  stepMultiplied = (step * stepMultiplier) >> 16;


  bool showTags;
  bool slotOnLeft;
  bool withSlot;
  int  x;
  int  xStep;
  int  yStep;
  int  itemCount = 0; // used only in 6 and 9

  if (displayMode == 6 || displayMode == 9) // dry run to count items
  {
    for (int i = 0; i < weaponCount; ++i)
    {
      if (!WM_IsInInventory(i))
      {
        if (!showNotAvailable)    { continue; }
        if (WM_IsHiddenWeapon(i)) { continue; }
      }
      ++itemCount;
    }
  }

  switch (displayMode)
  {
  case 0:
    x = 0.0;
    xStep = 0.0;
    yStep = stepMultiplied;
    showTags = true;
    slotOnLeft = true;
    withSlot = false;
    break;

  case 1:
    x = 0.0;
    xStep = 0.0;
    yStep = stepMultiplied;
    showTags = false;
    slotOnLeft = true;
    withSlot = false;
    break;

  case 2:
    x = 0.0;
    xStep = stepMultiplied;
    yStep = 0.0;
    showTags = false;
    slotOnLeft = true;
    withSlot = false;
    break;

  case 3:
    x = 0.5;
    xStep = 0.0;
    yStep = stepMultiplied;
    showTags = true;
    slotOnLeft = true;
    withSlot = true;
    break;

  case 4:
    x = 0.5;
    xStep = 0.0;
    yStep = stepMultiplied;
    showTags = true;
    slotOnLeft = false;
    withSlot = true;
    break;

  case 5:
    x = 0.5;
    xStep = 0.0;
    yStep = stepMultiplied;
    showTags = false;
    slotOnLeft = true;
    withSlot = false;
    break;

  case 6:
    x = 0.5 - (itemCount / 2) * stepMultiplied;
    xStep = stepMultiplied;
    yStep = 0.0;
    showTags = false;
    slotOnLeft = true;
    withSlot = false;
    break;

  case 7:
    x = 1.0;
    xStep = 0.0;
    yStep = stepMultiplied;
    showTags = true;
    slotOnLeft = false;
    withSlot = false;
    break;

  case 8:
    x = 1.0;
    xStep = 0.0;
    yStep = stepMultiplied;
    showTags = false;
    slotOnLeft = false;
    withSlot = false;
    break;

  case 9:
    x = 1.0 - itemCount * stepMultiplied;
    xStep = stepMultiplied;
    yStep = 0.0;
    showTags = false;
    slotOnLeft = false;
    withSlot = false;
    break;
  }

  if (!showTags) // print weapon info on center
  {
    int infoX = 0.5;
    switch (displayMode)
    {
    case 1: infoX = -0.02; break;
    case 2: infoX =  0.0;  break;
    case 5: infoX = -0.52; break;
    case 8: infoX =  0.96; break;
    case 9: infoX =  1.0;  break;
    }

    str ammo;
    if (selectedWeapon != WEAPON_HOLSTERED && selectedWeapon != highlightedWeapon)
    {
      str message = WM_GetPrintableWeaponName(selectedWeapon);
      if (ammoMode != 0)
      {
        str selectedClass = WM_GetWeaponName(selectedWeapon);
        ammo = WM_GetAmmoString(selectedClass, ammoMode);
        if (StrLen(ammo) != 0)
        {
          message = StrParam(s:message, s:" - ", s:ammo);
        }
      }
      HudMessage(s:" ", s:message, s:" ";
                 HUDMSG_PLAIN, msgIdSelected,
                 selectedWeaponColor, infoX, y + stepMultiplied * 4, 0);
    }

    str highlightedName = WM_GetPrintableWeaponName(highlightedWeapon);
    message = highlightedName;

    if (ammoMode != 0)
    {
      str highlightedClass = WM_GetWeaponName(highlightedWeapon);
      ammo = WM_GetAmmoString(highlightedClass, ammoMode);
      if (StrLen(ammo) != 0)
      {
        message = StrParam(s:message, s:" - ", s:ammo);
      }
    }
    HudMessage(s:" ", s:message, s:" ";
               HUDMSG_PLAIN, msgIdHighlighted,
               highlightedWeaponColor, infoX, y + stepMultiplied * 2, 0);
  }
  else
  {
    HudMessage(s:""; HUDMSG_PLAIN, msgIdSelected,    0, 0, 0, 0);
    HudMessage(s:""; HUDMSG_PLAIN, msgIdHighlighted, 0, 0, 0, 0);
  }

  int iBegin;
  int iEnd;
  int iStep;
  if (highToLow) { iBegin = weaponCount - 1; iEnd = -1;          iStep = -1; }
  else           { iBegin = 0;               iEnd = weaponCount; iStep =  1; }

  for (i = iBegin; i != iEnd; i += iStep)
  {
    if (!WM_IsInInventory(i))
    {
      if (!showNotAvailable)    { continue; }
      if (WM_IsHiddenWeapon(i)) { continue; }
    }

    int color;
    if      (i == highlightedWeapon) { color = highlightedWeaponColor;  }
    else if (i == selectedWeapon)    { color = selectedWeaponColor;     }
    else if (WM_IsInInventory(i))    { color = availableWeaponColor;    }
    else                             { color = notAvailableWeaponColor; }

    WM_PrintHudWeapon(i, color, x, y, slotOnLeft, withSlot, showTags, ammoMode);

    x += xStep;
    y += yStep;
  }
}

function str WM_MakeWeaponString(
  int  weaponNumber,
  bool withSlot,
  bool slotOnLeft,
  int  ammoMode
)
{
  str result = WM_GetWeaponTag(weaponNumber);

  if (withSlot)
  {
    int slot = WM_GetWeaponSlot(weaponNumber);
    if (slotOnLeft) { result = StrParam(d:slot,   s:" ", s:result); }
    else            { result = StrParam(s:result, s:" ", d:slot  ); }
  }
  else // no slot, just space
  {
    if (slotOnLeft) { result = StrParam(s:"   ", s:result); }
    else            { result = StrParam(s:result, s:"   "); }
  }

  if (ammoMode)
  {
    str ammo = WM_GetAmmoString(WM_GetWeaponName(weaponNumber), ammoMode);
    if (StrLen(ammo) != 0)
    {
      if (slotOnLeft) { result = StrParam(s:result, s:" - ", s:ammo  ); }
      else            { result = StrParam(s:ammo,   s:" - ", s:result); }
    }
  }

  return result;
}

function void WM_PrintHudWeapon(
  int weaponNumber,
  int color,
  int x,
  int y,
  bool slotOnLeft,
  bool withSlot,
  bool showTags,
  int ammoMode
)
{
  int id = msgIdWeapon + weaponNumber;

  if (!withSlot)
  {
    int slotNumber = WM_GetWeaponSlot(weaponNumber);
    HudMessage(s:" ", i:slotNumber, s:" ";
               HUDMSG_PLAIN, id + MAX_WEAPONS_NUMBER, color, x, y, 0);
  }

  if (!showTags) { return; }

  str weaponString = WM_MakeWeaponString(weaponNumber, withSlot, slotOnLeft, ammoMode);

  HudMessage(s:" ", s:weaponString, s:" "; HUDMSG_PLAIN, id, color, x, y, 0);
}

#define N_FONTS 6

function void WM_SetupFont(void)
{
  str fonts[N_FONTS] =
  {
    "SMALLFONT",
    "CONFONT",
    "BIGFONT",
    "MINIPL_W",
    "MINIPLWK",
    "MM2SFNTO",
  };

  int playerN  = PlayerNumber();
  int iFont    = GetUserCVar(playerN, "M8fWeaponMenuFont");

  if (0 <= iFont && iFont < N_FONTS)
  {
    SetFont(fonts[iFont]);
  }
}


// Control functions section ///////////////////////////////////////////////////

function int WM_FindRealSelectedWeapon(void)
{
  return WM_FindInWeaponList(GetWeapon());
}

function int WM_FindInWeaponList(str weaponName)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    if (StrCmp(weaponName, WM_GetWeaponName(i)) == 0)
    {
      return i;
    }
  }
  return ERROR_NOT_FOUND;
}

function void WM_SelectWeapon(int weaponNumber, bool changeLast)
{
  if (weaponNumber == selectedWeapon) { return; }
  if (WM_IsZoomed()) { WM_ToggleZoom(); }

  str  weaponName = WM_GetWeaponName(weaponNumber);
  bool success    = SetWeapon(weaponName);

  if (success)
  {
    int playerN = PlayerNumber();
    int holsterSpeedMultiplier = GetUserCvar(playerN, "M8fWeaponMenuHolsterSpeedMultiplier");
    if (holsterSpeedMultiplier != 0.0 && selectedWeapon == WEAPON_HOLSTERED)
    {
      SetActorProperty(0, APROP_SPEED, 1.0);
    }

    if (changeLast) { WM_SetLastUsedWeapon(WM_GetWeaponName(selectedWeapon)); }
    WM_SetSelectedWeapon(weaponNumber);

    WM_MaybePlaySoundOnWeaponChange();
  }
  else
  {
    str printableWeaponName = WM_GetPrintableWeaponName(weaponNumber);
    HudMessage(s:printableWeaponName, s:": no ammo.";
               HUDMSG_PLAIN, msgIdAmmo, CR_RED, 0.5, 0.5, 1.0);

    WM_SetHighlightedWeapon(selectedWeapon);
  }
}

function void WM_MaybePlaySoundOnWeaponChange(void)
{
  int playerN = PlayerNumber();
  bool playSoundOnWeaponChange = GetUserCVar(playerN, "m8f_wm_PlaySoundOnWeaponChange");
  if (playSoundOnWeaponChange)
  {
    WM_PlaySwitchSound();
  }
}

function void WM_InitApiCvars(void)
{
  int playerN = PlayerNumber();

  SetUserCVar(playerN, "M8fWeaponMenuWeaponCount", weaponCount);
  SetUserCVar(playerN, "M8fWeaponMenuIsOpened", false);

  for (int i = 0; i < weaponCount; ++i) {
    str weaponClassVarName = StrParam(s:"M8fWeaponMenuWeaponClass", i:i);
    str weaponNameVarName  = StrParam(s:"M8fWeaponMenuWeaponName",  i:i);
    str weaponSlotVarName  = StrParam(s:"M8fWeaponMenuWeaponSlot",  i:i);

    SetUserCVarString(playerN, weaponClassVarName, WM_GetWeaponName(i));
    SetUserCVarString(playerN, weaponNameVarName,  WM_GetPrintableWeaponName(i));
    SetUserCVar      (playerN, weaponSlotVarName,  WM_GetWeaponSlot(i));
  }
}

function void WM_PlaySwitchSound(void)
{
  int playerN = PlayerNumber();
  int switchSound = GetUserCVar(playerN, "M8fWeaponMenuSwitchSound");

  if (switchSound)
  {
    str sound = StrParam(s:"wmenu/switch", i:switchSound);
    PlaySound(0, sound);
  }
}

function void WM_SetupAddons(void)
{
  if (currentSet == FALLBACK_SET) { return; }

  WM_MaybeTacticalChainsaw();
  WM_MaybeUACSurvivalPack();
}

function void WM_AddWeapon(int slot, str class, str name)
{
  slots[currentSet][weaponCount] = slot;
  names[currentSet][weaponCount] = class;
  tags [currentSet][weaponCount] = name;
  ++weaponCounts[currentSet];
}

function void WM_MaybeUACSurvivalPack(void)
{
  str satchelChargeClass = "Det_satchelCharge";
  if (CheckClass(satchelChargeClass))
  {
    WM_AddWeapon(0, satchelChargeClass, "Satchel Charge with Detonator");
  }

  str pipebombClass = "Det_Pipebomb";
  if (CheckClass(pipebombClass))
  {
    WM_AddWeapon(0, pipebombClass, "Pipebombs with Detonator");
  }
}

function void WM_MaybeTacticalChainsaw(void)
{
  // function specifically for Tactical Chainsaw mod
  // https://www.doomworld.com/idgames/combos/ph_stuff

  str tacticalClass = "TacticalChainsaw";
  if (!CheckClass(tacticalClass)) { return; }

  for (int i = weaponCount; i > 0; --i)
  {
    WM_SwapWeapons(i, i-1);
  }
  slots[currentSet][0] = 0;
  names[currentSet][0] = tacticalClass;
  tags [currentSet][0] = "Tactical Chainsaw";
  ++weaponCount;
}

#define N_MATCHED_CLASSES 19

function int WM_SpecialMatchClassToWeaponSet(str class)
{
  // First case: one weapon set for several classes.

  str classes[N_MATCHED_CLASSES][2] =
  {
    // DoomRL Arsenal
    { "DoomRLMarine",        42 },
    { "DoomRLScout",         42 },
    { "DoomRLTechnician",    42 },
    { "DoomRLRenegade",      42 },
    { "DoomRLDemolitionist", 42 },
    { "DoomRLCommando",      42 },

    // X-Weapon
    { "XDoomPlayer",         45 },
    { "XDoomPlayer2",        45 },
    { "XDoomPlayer3",        45 },
    { "XDoomPlayer4",        45 },

    // Harmony mods
    { "HarmonyPlayer",       46 },

    // Doom Delta
    { "LoreleiPlayer", 47 },
    { "JohnPlayer",    47 },
    { "DimitriPlayer", 47 },
    { "ThiPlayer",     47 },
    { "BetaPlayer",    47 },

    // Brutal Doom
    { "BDoomer",        28 },
    { "Doomer2",        28 },
    { "TacticalDoomer", 28 },
  };

  for (int i = 0; i < N_MATCHED_CLASSES; ++i)
  {
    if (StrCmp(class, classes[i][0]) == 0)
    {
      return classes[i][1];
    }
  }

  // Second case: one class for several weapon sets.

  if (StrCmp(class, "DoomPlayer") == 0)
  {
    if      (WM_IsFreedoom()) { return 44; }
    else if (WM_IsHarmony())  { return 46; }
    else                      { return  0; }
  }

  if (StrCmp(class, "PerkDPlayer") == 0)
  {
    if (WM_IsEVP()) { return 48; }
    else            { return  1; }
  }

  if (StrCmp(class, "FKPlayer") == 0)
  {
    if (WM_IsFlakesDoom()) { return 50; }
    else                   { return 14; }
  }

  return ERROR_NOT_FOUND;
}

function int WM_GetWeaponSet(void)
{
  int playerN = PlayerNumber();
  bool forceFallbackMode = GetUserCVar(playerN, "m8f_wm_ForceFallbackMode");
  if (forceFallbackMode) { return FALLBACK_SET; }

  str currentClass = GetActorClass(0);

  // search for class in special lists (class/set: one-to-many and many-to-one).
  int matchedClass = WM_SpecialMatchClassToWeaponSet(currentClass);
  if (matchedClass != ERROR_NOT_FOUND)
  {
    return matchedClass;
  }

  // search for class in regular lists (class/set: one-to-one).
  for (int c = 0; c < SETS_NUMBER; ++c)
  {
    if (CheckActorClass(0, playerClassNames[c]))
    {
      return c;
    }
  }

  return FALLBACK_SET;
}

function bool WM_IsTitlemap(void)
{
  str mapLumpName = StrParam(n:PRINTNAME_LEVEL);
  return (StrICmp(mapLumpName, "TITLEMAP") == 0);
}

function bool WM_IsOpenOnScroll(void)
{
  int playerN = PlayerNumber();
  return GetUserCVar(playerN, "M8fWeaponMenuOpenOnScroll");
}

function bool WM_IsMelee(void)
{
  if (selectedWeapon == WEAPON_HOLSTERED) return true;
  if (WM_GetWeaponSlot(selectedWeapon) != 1) return false;

  int playerN = PlayerNumber();
  int isSlot1Melee = !GetUserCVar(playerN, "m8f_wm_IsNotSlot1Melee");

  return isSlot1Melee;
}

// Scripts section /////////////////////////////////////////////////////////////

script "ShowWeaponMenu" ENTER
{
  int state = WM_GetInitialState();

  if (state == STATE_TERMINATED) { terminate; }

  // for some reason without delay only vanilla weapons will be listed.
  if (currentSet == FALLBACK_SET) { Delay(1); }

  WM_ChangeState(state);

  int updatePeriod = 10;
  int updateCount = 0;

  int playerN = PlayerNumber();
  int oldInstant = GetUserCVar(playerN, "M8fWeaponMenuInstantSwitch");

  int distanceCheckTid = UniqueTID();
  int laserColor = GetUserCVar(playerN, "m8f_wm_LaserColor");
  bool showLaserSight = GetUserCVar(playerN, "m8f_wm_ShowLaserSight");

  // options
  while (true)
  {
    // CVar may have been reset by other games while this game was saved.
    WM_SetCVar(true, "M8fWeaponMenuIsEnabled");
    WM_SetCVar(IsOpened() || IsInventory(),  "M8fWeaponMenuIsOpened");

    if (updateCount < updatePeriod) { ++updateCount; }
    else
    {
      updateCount = 0;

      bool instant = GetUserCVar(playerN, "M8fWeaponMenuInstantSwitch");
      if (oldInstant != instant)
      {
        WM_InstantSwitch(instant == 2);
        oldInstant = instant;
      }

      if (IsVisible())
      {
        bool updated = WM_UpdateIsInInventory();
        if (updated) { WM_UpdateMenu(); }
      }

      if (IsInventory())
      {
        WM_PrintInventoryMenu();
      }

      laserColor = GetUserCVar(playerN, "m8f_wm_LaserColor");
      showLaserSight = GetUserCVar(playerN, "m8f_wm_ShowLaserSight");
    }

    /* debug output
    SetFont("SMALLFONT");
    Log(s:"sel:",   i:selectedWeapon,
        s:" high:", i:highlightedWeapon,
        s:" last:", s:lastUsedWeapon);
    ///*///

    // Check if currently selected weapon corresponds to what player is holding.
    // Handles situation when player drops a weapon, or switches to new weapon
    // on pickup.
    if (selectedWatchEnabled && !WM_IsSelected(selectedWeapon))
    {
      str currentWeaponClass = GetWeapon();
      int currentWeaponI     = WM_FindInWeaponList(currentWeaponClass);

      if (currentWeaponI != ERROR_NOT_FOUND)
      {
        str selectedClass = WM_GetWeaponName(selectedWeapon);
        if (CheckInventory(selectedClass))
        {
          WM_SetLastUsedWeapon(selectedClass);
        }

        if (WM_IsZoomed()) { WM_ToggleZoomWeapon(selectedClass); }
        WM_SetHighlightedWeapon(currentWeaponI);
        WM_SetSelectedWeapon(highlightedWeapon);
        WM_UpdateMenu();
      }
    }

    if (showLaserSight) if (!WM_IsMelee())
    {
      WM_ShowLaserSight(distanceCheckTid, laserColor);
    }

    Delay(1);
  }
}

script "ApplyWeaponMenuSettings" (void)
{
  WM_UpdateMenu();
}

script "ToggleWeaponMenu" (int closeWithoutAction)
{
  if (IsInventory())
  {
    if (closeWithoutAction)
    {
      WM_ChangeState(STATE_CLOSED);
    }
    else
    {
      str selectedInventory = WM_GetSelectedInventory();
      if (StrCmp(selectedInventory, "wm_none") != 0)
      {
        UseInventory(selectedInventory);
      }
      else
      {
        WM_ChangeState(STATE_CLOSED);
      }
    }
    terminate;
  }

  if (IsOpened() && closeWithoutAction)
  {
    WM_SetHighlightedWeapon(WM_FindRealSelectedWeapon());
  }

  WM_ToggleWeaponMenu();
}

function void WM_ToggleWeaponMenu(void)
{
  if (IsOpened())
  {
    WM_ChangeState(STATE_CLOSED);
  }
  else
  {
    WM_ChangeState(STATE_OPENED);
  }
}

function int WM_FindSelectedInventoryIndex(void)
{
  // find currently selected
  str selectedInventoryClass = WM_GetSelectedInventory();
  for (int i = 0; i < nInventoryItems; ++i)
  {
    if (StrCmp(selectedInventoryClass, inventoryClasses[i]) == 0)
    {
      return i;
    }
  }
  return ERROR_NOT_FOUND;
}

function int WM_FindNextAvailableInventory(int selectedInventoryIndex)
{
  for (int i = 1; i < nInventoryItems; ++i)
  {
    int availableIndex = (selectedInventoryIndex + i) % nInventoryItems;
    if (CheckInventory(inventoryClasses[availableIndex]))
    {
      return availableIndex;
    }
  }
  return ERROR_NOT_FOUND;
}

function int WM_FindPrevAvailableInventory(int selectedInventoryIndex)
{
  for (int i = 1; i < nInventoryItems; ++i)
  {
    int availableIndex = (selectedInventoryIndex + nInventoryItems - i) % nInventoryItems;
    if (CheckInventory(inventoryClasses[availableIndex]))
    {
      return availableIndex;
    }
  }
  return ERROR_NOT_FOUND;
}

function void WM_SetSelectedInventory(int selectedIndex, int availableIndex)
{
  if (selectedIndex == availableIndex || availableIndex == ERROR_NOT_FOUND) { return; }

  WM_PlaySwitchSound();
  str inventoryClass = inventoryClasses[availableIndex];
  ScriptCall("WMZscriptHelper", "SetSelectedInventory", inventoryClass);
}

function void WM_SelectNextInventory(void)
{
  int selectedInventoryIndex = WM_FindSelectedInventoryIndex();
  if (selectedInventoryIndex == ERROR_NOT_FOUND) { return; }

  int nextAvailableInventoryIndex = WM_FindNextAvailableInventory(selectedInventoryIndex);
  WM_SetSelectedInventory(selectedInventoryIndex, nextAvailableInventoryIndex);
}

function void WM_SelectPreviousInventory(void)
{
  int selectedInventoryIndex = WM_FindSelectedInventoryIndex();
  if (selectedInventoryIndex == ERROR_NOT_FOUND) { return; }

  int prevAvailableInventoryIndex = WM_FindPrevAvailableInventory(selectedInventoryIndex);
  WM_SetSelectedInventory(selectedInventoryIndex, prevAvailableInventoryIndex);
}

script "ScrollNextWeapon" (void)
{
  if (IsInventory())
  {
    WM_SelectNextInventory();
    WM_PrintInventoryMenu();
    terminate;
  }

  if (WM_IsOpenOnScroll() && !IsOpened())
  {
    WM_ChangeState(STATE_OPENED);
  }

  int i;
  int stopper = weaponCount;

  if (IsOpened())
  {
    i = highlightedWeapon;
    do
    {
      ++i;
      if (i >= weaponCount) { i = 0; }
      --stopper;
    }
    while (!WM_IsInInventory(i) && stopper);

    WM_SetHighlightedWeapon(i);
    if (stopper) { WM_PlaySwitchSound(); }
  }

  else
  {
    if (WM_IsZoomed()) { WM_ToggleZoom(); }

    i = selectedWeapon;
    if (i == WEAPON_HOLSTERED) { i = 0; }
    do
    {
      ++i;
      if (i >= weaponCount) { i = 0; }
      --stopper;
    }
    while (!SetWeapon(WM_GetWeaponName(i)) && stopper);

    if (i != selectedWeapon)
    {
      WM_SetLastUsedWeapon(WM_GetWeaponName(selectedWeapon));
      WM_SetSelectedWeapon(i);
      WM_SetHighlightedWeapon(i);
      WM_MaybeDisplayNameTag();
      WM_MaybePlaySoundOnWeaponChange();
    }
  }

  WM_UpdateMenu();
}

function void WM_MaybeDisplayNameTag(void)
{
  bool showNameTag = (GetCVar("displaynametags") >= 2);
  if (showNameTag)
  {
    int nametagcolor = GetCVar("nametagcolor");
    str selectedName = WM_GetPrintableWeaponName(selectedWeapon);
    HudMessage(s:selectedName;
               HUDMSG_FADEOUT, msgIdTag, nametagcolor, 0.5, 0.9, 2.0, 1.0);

  }
}

script "ScrollPreviousWeapon" (void)
{
  if (IsInventory())
  {
    WM_SelectPreviousInventory();
    WM_PrintInventoryMenu();
    terminate;
  }

  if (WM_IsOpenOnScroll() && !IsOpened())
  {
    WM_ToggleWeaponMenu();
  }

  int i;
  int stopper = weaponCount;

  if (IsOpened())
  {
    i = highlightedWeapon;
    do
    {
      --i;
      if (i < 0) { i = weaponCount - 1; }
      --stopper;
    }
    while (!WM_IsInInventory(i) && stopper);

    WM_SetHighlightedWeapon(i);
    if (stopper) { WM_PlaySwitchSound(); }
  }

  else
  {
    if (WM_IsZoomed()) { WM_ToggleZoom(); }

    i = selectedWeapon;
    if (i == WEAPON_HOLSTERED) { i = weaponCount - 1; }
    do
    {
      --i;
      if (i < 0) { i = weaponCount - 1; }
      --stopper;
    }
    while (!SetWeapon(WM_GetWeaponName(i)) && stopper);

    if (i != selectedWeapon)
    {
      WM_SetLastUsedWeapon(WM_GetWeaponName(selectedWeapon));
      WM_SetSelectedWeapon(i);
      WM_SetHighlightedWeapon(i);
      WM_MaybeDisplayNameTag();
      WM_MaybePlaySoundOnWeaponChange();
    }
  }

  int playerN = PlayerNumber();
  SetUserCVar(playerN, "M8fWeaponMenuHighlightedWeapon", highlightedWeapon);

  WM_UpdateMenu();
}

script "SmartWeaponSelection" (int slotNumber)
{
  if (IsInventory())
  {
    WM_ChangeState(STATE_CLOSED);
  }

  if (IsOpened())
  {
    int currentSlot = WM_GetWeaponSlot(highlightedWeapon);
    bool sameSlot = (slotNumber == currentSlot);
    if (sameSlot)
    {
      int sibling = highlightedWeapon;
      int stopper = weaponCount;
      do
      {
        sibling = WM_GetWeaponSibling(sibling);
        if (sibling == -1) break;
        --stopper;
      }
      while (!WM_IsInInventory(sibling) && stopper);

      if (sibling != -1 && sibling != highlightedWeapon)
      {
        WM_SetHighlightedWeapon(sibling);
        WM_PlaySwitchSound();
      }
    }
    else
    {
      WM_HighlightFirstInInventory(slotNumber);
    }
  }

  else
  {
    int playerN = PlayerNumber();
    bool immediatelySelect = GetUserCVar(playerN, "M8fWeaponMenuImmediatelySelectIfOnlyInSlot");
    if (immediatelySelect)
    {
      int weaponNumber = WM_GetWeaponBySlotInInv(slotNumber);
      if (weaponNumber == -1) { terminate; }

      if (WM_IsOnlyInSlot(weaponNumber))
      {
        if (CheckInventory(WM_GetWeaponName(weaponNumber)))
        {
          WM_SelectWeapon(weaponNumber, true);
          terminate;
        }
      }
    }

    WM_ToggleWeaponMenu();
    WM_HighlightFirstInInventory(slotNumber);
  }

  WM_UpdateMenu();
}

script "SelectLastUsedWeapon" (void)
{
  if (CheckInventory(lastUsedWeapon))
  {
    WM_SelectWeapon(WM_FindInWeaponList(lastUsedWeapon), true);
  }

  WM_UpdateMenu();
}

script "WM_MarkWeaponAsFavorite" (void)
{
  if (selectedWeapon == WEAPON_HOLSTERED) { terminate; }
  WM_SetCVar(selectedWeapon, "M8fWeaponMenuFavoriteWeapon");
  Log(s:WM_GetPrintableWeaponName(selectedWeapon), s:" is set as favorite weapon.");
}

script "WM_SelectFavoriteWeapon" (void)
{
  int playerN = PlayerNumber();
  int favorite = GetUserCVar(playerN, "M8fWeaponMenuFavoriteWeapon");
  if (CheckInventory(WM_GetWeaponName(favorite)))
  {
    WM_SelectWeapon(favorite, true);
  }

  WM_UpdateMenu();
}


// Utility functions section ///////////////////////////////////////////////////

function bool WM_UpdateIsInInventory(void)
{
  bool updated = false;

  for (int i = 0; i < weaponCount; ++i)
  {
    bool old = isInInventory[i];
    isInInventory[i] = CheckInventory(WM_GetWeaponName(i));
    if (old != isInInventory[i]) { updated = true; }
  }

  return updated;
}

function void WM_ResetIsInInventory(void)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    isInInventory[i] = CheckInventory(WM_GetWeaponName(i));
  }
}

function bool WM_IsInInventory(int weaponNumber)
{
  return isInInventory[weaponNumber];
}

function int WM_CountIsInInventory(void)
{
  int result = 0;
  for (int i = 0; i < weaponCount; ++i)
  {
    result += isInInventory[i];
  }
  return result;
}

function bool WM_IsSelected(int weaponNumber)
{
  if (weaponNumber == WEAPON_HOLSTERED) { return true; }
  return CheckWeapon(WM_GetWeaponName(weaponNumber));
}

function void WM_HighlightFirstInInventory(int slotNumber)
{
  int weaponNumber = WM_GetWeaponBySlotInInv(slotNumber);
  if (WM_IsInInventory(weaponNumber) && highlightedWeapon != weaponNumber)
  {
    WM_SetHighlightedWeapon(weaponNumber);
    WM_PlaySwitchSound();
  }
}

function bool WM_IsValidWeaponNumber(int weaponNumber)
{
  return (0 <= weaponNumber && weaponNumber < weaponCount);
}

function int WM_IfThenElse(bool condition, int trueValue, int falseValue)
{
  if (condition)
  {
    return trueValue;
  }

  return falseValue;
}

// Global variables write access functions /////////////////////////////////////

function void WM_SetCVar(int value, str cvarName)
{
  int playerN = PlayerNumber();
  SetUserCVar(playerN, cvarName, value);
}

function void WM_SetHighlightedWeapon(int weaponNumber)
{
  if (weaponNumber == WEAPON_HOLSTERED) { return; }
  highlightedWeapon = weaponNumber;
  WM_SetCVar(highlightedWeapon, "M8fWeaponMenuHighlightedWeapon");
}

function void WM_SetSelectedWeapon(int weaponNumber)
{
  selectedWeapon = weaponNumber;
  WM_SetCVar(selectedWeapon, "M8fWeaponMenuSelectedWeapon");
}

function void WM_SetLastUsedWeapon(str weaponClass)
{
  lastUsedWeapon = weaponClass;
  int playerN = PlayerNumber();
  SetUserCVarString(playerN, "m8f_wm_LastUsedWeapon", lastUsedWeapon);
}

// Weapon Priority Section /////////////////////////////////////////////////////

script "WM_IncreasePriority" (void)
{
  if (currentSet == FALLBACK_SET)
  {
    Log(s:"Changing weapon slot is not available in fallback mode.");
    terminate;
  }

  str name = WM_GetPrintableWeaponName(highlightedWeapon);
  if (highlightedWeapon == 0)
  {
    Log(s:"Priority of ", s:name, s:" is already maximal.");
    terminate;
  }

  int oldMajorWeapon = highlightedWeapon - 1;
  int thisWeaponSlot = WM_GetWeaponSlot(highlightedWeapon);
  int oldWeaponSlot  = WM_GetWeaponSlot(oldMajorWeapon);
  if (thisWeaponSlot != oldWeaponSlot)
  {
    Log(s:"Priority of ", s:name, s:" is already maximal.");
    terminate;
  }

  WM_SwapWeapons(highlightedWeapon, oldMajorWeapon);
  WM_SetHighlightedWeapon(oldMajorWeapon);
  Log(s:"Priority of ", s:name, s:" is increased.");
  WM_UpdateMenu();
}

function void WM_SwapWeapons(int w1, int w2)
{
  if (w1 == w2) { return; }

  int namesTmp = names[currentSet][w1];
  names[currentSet][w1] = names[currentSet][w2];
  names[currentSet][w2] = namesTmp;

  int playerN = PlayerNumber();
  str weaponClassVarName1 = StrParam(s:"M8fWeaponMenuWeaponClass", i:w1);
  str weaponClassVarName2 = StrParam(s:"M8fWeaponMenuWeaponClass", i:w2);
  SetUserCVarString(playerN, weaponClassVarName1, WM_GetWeaponName(w1));
  SetUserCVarString(playerN, weaponClassVarName2, WM_GetWeaponName(w2));

  int tagTmp = tags[currentSet][w1];
  tags[currentSet][w1] = tags[currentSet][w2];
  tags[currentSet][w2] = tagTmp;

  str weaponNameVarName1 = StrParam(s:"M8fWeaponMenuWeaponName", i:w1);
  str weaponNameVarName2 = StrParam(s:"M8fWeaponMenuWeaponName", i:w2);
  SetUserCVarString(playerN, weaponNameVarName1, WM_GetPrintableWeaponName(w1));
  SetUserCVarString(playerN, weaponNameVarName2, WM_GetPrintableWeaponName(w2));

  int slotTmp = slots[currentSet][w1];
  slots[currentSet][w1] = slots[currentSet][w2];
  slots[currentSet][w2] = slotTmp;

  str slotVarName1 = StrParam(s:"M8fWeaponMenuWeaponSlot", i:w1);
  str slotVarName2 = StrParam(s:"M8fWeaponMenuWeaponSlot", i:w2);
  SetUserCVar(playerN, slotVarName1, WM_GetWeaponSlot(w1));
  SetUserCVar(playerN, slotVarName2, WM_GetWeaponSlot(w2));

  int priorityTmp = priority[w1];
  priority[w1] = priority[w2];
  priority[w2] = priorityTmp;
}

script "WM_IncreaseSlot" (void)
{
  if (currentSet == FALLBACK_SET)
  {
    Log(s:"Changing weapon slot is not available in fallback mode.");
    terminate;
  }

  int currentSlot = WM_GetWeaponSlot(highlightedWeapon);
  if (currentSlot == 11) { terminate; }

  int nextSlot[11] = { 10, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11 };
  int targetSlot = nextSlot[currentSlot];

  int i = highlightedWeapon;
  if (i != weaponCount - 1)
  {
    while ((WM_GetWeaponSlot(i + 1) == currentSlot) && (i != weaponCount - 1))
    {
      WM_SwapWeapons(i, i + 1);
      if (i + 1 == selectedWeapon) { WM_SetSelectedWeapon(i); }
      ++i;
    }
  }
  WM_ResetIsInInventory();

  slots[currentSet][i] = targetSlot;
  WM_SetHighlightedWeapon(i);
  str name = WM_GetPrintableWeaponName(i);
  Log(s:"Slot of ", s:name, s:" is changed to ", i:targetSlot, s:".");
  WM_UpdateMenu();
}

script "WM_DecreaseSlot" (void)
{
  if (currentSet == FALLBACK_SET)
  {
    Log(s:"Changing weapon slot is not available in fallback mode.");
    terminate;
  }

  int currentSlot = WM_GetWeaponSlot(highlightedWeapon);
  if (currentSlot == 1) { terminate; }

  int prevSlot[12] = { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10 };
  int targetSlot = prevSlot[currentSlot];

  int i = highlightedWeapon;
  if (i != 0)
  {
    while (WM_GetWeaponSlot(i - 1) == currentSlot && i != 0)
    {
      WM_SwapWeapons(i, i - 1);
      if (i - 1 == selectedWeapon) { WM_SetSelectedWeapon(i); }
      --i;
    }
  }
  WM_ResetIsInInventory();

  slots[currentSet][i] = targetSlot;
  str name = WM_GetPrintableWeaponName(highlightedWeapon);
  WM_SetHighlightedWeapon(i);
  Log(s:"Slot of ", s:name, s:" is changed to ", i:targetSlot, s:".");
  WM_UpdateMenu();
}

script "WM_PrintInfo" (void)
{
  Log(s:"Player: ", s:GetActorClass(0));
  Log(s:"Selected: ", i:selectedWeapon, s:": ",
      s:WM_GetWeaponName(selectedWeapon), s:": ",
      s:GetWeapon());
  Log(s:"Highlighted: ", i:highlightedWeapon, s:": ",
      s:WM_GetWeaponName(highlightedWeapon));
  Log(s:"Last used: ", s:lastUsedWeapon);
  int playerN = PlayerNumber();
  int favorite = GetUserCVar(playerN, "M8fWeaponMenuFavoriteWeapon");
  Log(s:"Favorite: ", i:favorite, s:": ",
      s:WM_GetWeaponName(favorite));
  Log(s:"Speed: ", f:GetActorProperty(0, APROP_Speed));
  Log(s:"State: ", i:globalState);

  if (currentSet == FALLBACK_SET) { Log(s:"Weapon Menu Plus - Universal Mode"); }
  else { Log(s:"Weapon Menu Plus - Extended Support Mode"); }
}

function str WM_GetAmmoString(str weaponClass, int ammoMode)
{
  if (ammoMode == 0) { return ""; }

  bool showSecondary = ammoMode == 2;
  int playerN = PlayerNumber();
  ScriptCall("WMZscriptHelper", "TellAmmo", weaponClass, showSecondary);
  return GetUserCVarString(playerN, "m8f_wm_ResultString");
}

function bool WM_IsWeaponReady(str weaponClass)
{
  int playerN = PlayerNumber();
  ScriptCall("WMZscriptHelper", "IsWeaponReady", weaponClass);
  bool isReady = GetUserCVar(playerN, "m8f_wm_ResultInt");
  return isReady;
}

function bool WM_IsWeaponDeselectable(str weaponClass)
{
  int playerN = PlayerNumber();
  ScriptCall("WMZscriptHelper", "IsWeaponDeselectable", weaponClass);
  bool isDeselectable = GetUserCVar(playerN, "m8f_wm_ResultInt");
  return isDeselectable;
}

bool returnToLast;
int returnTo;
bool wasZoomed;
bool favoriteFiring = false;

script "WM_FireFavoriteWeapon" (void)
{
  if (selectedWeapon == WEAPON_HOLSTERED) { terminate; }

  int playerN = PlayerNumber();
  int cycleValue = GetUserCVar(playerN, "M8fWMCycle");
  int keyPressedMore = !((cycleValue <= 1) && (cycleValue != 0));
  if (keyPressedMore) { terminate; }

  int favorite = GetUserCVar(playerN, "M8fWeaponMenuFavoriteWeapon");
  str favoriteClass = WM_GetWeaponName(favorite);
  if (!CheckInventory(favoriteClass)) { terminate; }
  favoriteFiring = true;

  wasZoomed = WM_IsZoomed();
  returnToLast = (favorite != selectedWeapon);
  returnTo = selectedWeapon;
  selectedWatchEnabled = false;

  int fireMode = GetUserCVar(playerN, "m8f_wm_FavoriteFireMode");
  bool instant = (GetUserCVar(playerN, "M8fWeaponMenuInstantSwitch") == 1);
  if (instant) { WM_InstantSwitch(true); }
  WM_SelectWeapon(favorite, false);
  if (instant) { Delay(1); WM_InstantSwitch(false); }

  if (fireMode == 2) { Delay(10); } // No fire mode

  bool isReady = WM_IsWeaponReady(favoriteClass);
  int i = 0;
  int iMax = 35 * 2; // 2 seconds
  bool alreadyFired = false;
  while (!(WM_IsSelected(favorite) && isReady))
  {
    // this is to interrupt script in case something has gone wrong.
    if (i > 0 && isReady && !WM_IsSelected(favorite))
    {
      selectedWatchEnabled = true;
      terminate;
    }
    ++i;

    Delay(1);
    isReady = (WM_IsWeaponReady(favoriteClass) || i > iMax);

    if (alreadyFired == false)
    {
      int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
      alreadyFired = (buttons & (BT_ATTACK|BT_ALTATTACK));
    }
  }

  if (alreadyFired) { Delay(1); }
  else
  {
    switch (fireMode)
    {
    case 0: ScriptCall("WMZScriptHelper", "FireWeapon",    favoriteClass); break;
    case 1: ScriptCall("WMZScriptHelper", "FireWeaponAlt", favoriteClass); break;
    case 2: break;
    }
  }

  favoriteFiring = false;
}

script "WM_FireFavoriteSwitchBack" (void)
{
  while (favoriteFiring) { Delay(1); }

  int playerN = PlayerNumber();
  int favorite = GetUserCVar(playerN, "M8fWeaponMenuFavoriteWeapon");
  str favoriteClass = WM_GetWeaponName(favorite);
  bool isReady = WM_IsWeaponDeselectable(favoriteClass);
  while (!isReady)
  {
    Delay(1);
    isReady = WM_IsWeaponDeselectable(favoriteClass);
  }

  if (returnToLast && CheckInventory(WM_GetWeaponName(returnTo)))
  {
    bool instant = (GetUserCVar(playerN, "M8fWeaponMenuInstantSwitch") == 1);
    if (instant) { WM_InstantSwitch(true); }
    WM_SelectWeapon(returnTo, false);
    if (instant) { Delay(1); WM_InstantSwitch(false); }
    if (wasZoomed) { WM_ToggleZoom(); }
  }

  selectedWatchEnabled = true;
}

function void WM_InstantSwitch(bool enable)
{
  SetPlayerProperty(0, enable, PROP_INSTANTWEAPONSWITCH);
}

#define N_MODS_NO_HOLSTER 2

script "WM_HolsterWeapon" (void)
{
  if (selectedWeapon == WEAPON_HOLSTERED) { terminate; }
  if (WM_IsZoomed()) { WM_ToggleZoom(); }

  int forbiddenMods[N_MODS_NO_HOLSTER] = { 16, 47 };
  for (int i = 0; i < N_MODS_NO_HOLSTER; ++i)
  {
    if (currentSet == forbiddenMods[i])
    {
      Log(s:"Weapon holstering is not supported in this mod.");
      terminate;
    }
  }

  int playerN = PlayerNumber();
  int holsterSpeedMultiplier = GetUserCvar(playerN, "M8fWeaponMenuHolsterSpeedMultiplier");
  if (holsterSpeedMultiplier != 0.0)
  {
    SetActorProperty(0, APROP_SPEED, holsterSpeedMultiplier);
  }

  WM_ChangeState(STATE_CLOSED);
  WM_SetLastUsedWeapon(WM_GetWeaponName(selectedWeapon));
  WM_SetSelectedWeapon(WEAPON_HOLSTERED);
  ScriptCall("WMZScriptHelper", "HolsterWeapon");
}

// Laser sight section /////////////////////////////////////////////////////////

#define N_PUFFS 6

str puffs[3][N_PUFFS] =
{
  { "WM_Laser5", "WM_Laser0", "WM_Laser1", "WM_Laser2", "WM_Laser3", "WM_Laser4" },
  { "WM_LaserG5", "WM_LaserG0", "WM_LaserG1", "WM_LaserG2", "WM_LaserG3", "WM_LaserG4"},
  { "WM_LaserB5", "WM_LaserB0", "WM_LaserB1", "WM_LaserB2", "WM_LaserB3", "WM_LaserB4"},
};

#define MAX_DISTANCE 4096.0
#define PUFF_FLAGS FHF_NORANDOMPUFFZ | FHF_NOIMPACTDECAL

function void WM_ShowLaserSight(int distanceCheckTid, int laserColor)
{
  int angle = GetActorAngle(0);
  int pitch = GetActorPitch(0);
  LineAttack(0, angle, pitch, 0, "WM_InvisiblePuff", "None", MAX_DISTANCE,
             PUFF_FLAGS, distanceCheckTid);

  int distance = VectorLength(GetActorX(distanceCheckTid) - GetActorX(0),
                              GetActorY(distanceCheckTid) - GetActorY(0));

  if (distance < 1572864) { return; }

  int iPuff = 0;
  if      (distance <  10485760) { iPuff = 1; }
  else if (distance <  26214400) { iPuff = 2; }
  else if (distance <  52428800) { iPuff = 3; }
  else if (distance < 104857600) { iPuff = 4; }
  else                           { iPuff = 5; }

  if (zoomFactor >= 1.8) { --iPuff; }

  str puff = puffs[laserColor][iPuff];

  /*
  Log(i:distance);
  Log(s:puff);
  ///*///

  LineAttack(0, angle, pitch, 0, puff, "None", MAX_DISTANCE, PUFF_FLAGS);
}

// Inventory menu section //////////////////////////////////////////////////////

script "WM_InventoryMenu" (void)
{
  if (IsInventory())
  {
    WM_ChangeState(STATE_CLOSED);
  }
  else
  {
    if (nInventoryItems != 0)
    {
      WM_ChangeState(STATE_INVENTORY);
    }
    else
    {
      Log(s:"Inventory is empty.");
    }
  }
}

function void WM_FillInventoryItems(void)
{
  ScriptCall("WMZScriptHelper", "GetInventoryList");

  int playerN = PlayerNumber();
  str inventoryContents = GetUserCVarString(playerN, "m8f_wm_ResultString");

  int inventoryContentsLength = StrLen(inventoryContents);

  int current = 0;
  str currentToken = "";
  int iArray = 0;

  for (int i = 0; i < inventoryContentsLength && current < N_INVENTORY_ITEMS; ++i)
  {
    int character = GetChar(inventoryContents, i);
    if (character != '>')
    {
      currentToken = StrParam(s:currentToken, c:character);
    }
    else
    {
      switch (iArray)
      {
      case 0:
        inventoryClasses[current] = currentToken;
        break;
      case 1: inventoryNames[current] = currentToken; ++current; break;
      }

      iArray = (iArray + 1) % 2;
      currentToken = "";
    }
  }

  /*
  for (int j = 0; j < current; ++j)
  {
    Log(s:inventoryClasses[j], s:" : ", s:inventoryNames[j]);
  }
  ///*///

  nInventoryItems = current;
}

function void WM_PrintInventoryMenu(void)
{
  WM_ClearScreen();

  int playerN = PlayerNumber();
  bool disableOutput = GetUserCVar(playerN, "M8fWeaponMenuDisableNativeOutput");
  if (disableOutput) { return; }

  WM_SetupFont();

  int availableColor   = GetUserCVar(playerN, "M8FAvailableWeaponColor");
  int highlightedColor = GetUserCVar(playerN, "M8FHighlightedWeaponColor");
  bool highToLow       = GetUserCVar(playerN, "M8FWeaponMenuHighToLow");

  int xStart           = GetUserCVar(playerN, "m8f_wm_InventoryMenuX");
  int yStart           = GetUserCVar(playerN, "m8f_wm_InventoryMenuY");
  int stepMultiplier   = GetUserCVar(playerN, "m8f_wm_StepMultiplier");

  int stepMultiplied = (0.05 * stepMultiplier) >> 16;

  int iBegin;
  int iEnd;
  int iStep;
  if (highToLow) {iBegin = nInventoryItems-1; iEnd = -1;              iStep = -1;}
  else           {iBegin = 0;                 iEnd = nInventoryItems; iStep =  1;}

  str selectedInventoryClass = WM_GetSelectedInventory();
  int position = 0;
  for (int i = iBegin; i != iEnd; i += iStep)
  {
    int inventoryClass = inventoryClasses[i];
    int amount = CheckInventory(inventoryClass);
    if (amount == 0) { continue; }

    int color;
    if (StrCmp(inventoryClass, selectedInventoryClass) == 0)
    {
      color = highlightedColor;
    }
    else
    {
      color = availableColor;
    }

    WM_PrintInventoryItem(i, position, color, xStart, yStart, stepMultiplied, amount);
    ++position;
  }

  if (position == 0)
  {
    HudMessage(s:"[Inventory is empty]";
               HUDMSG_PLAIN, msgIdWeapon, availableColor, xStart, yStart, 0);
  }

}

function void WM_PrintInventoryItem(
  int i,
  int position,
  int color,
  int xStart,
  int yStart,
  int stepMultiplied,
  int amount
)
{
  int id = msgIdWeapon + position;
  int y = yStart + position * stepMultiplied;
  int x = xStart;

  str itemString;

  if (amount == 1) { itemString = inventoryNames[i]; }
  else { itemString = StrParam(s:inventoryNames[i], s:" [", d:amount, s:"]"); }

  HudMessage(s:" ", s:itemString, s:" "; HUDMSG_PLAIN, id, color, x, y, 0);
}

// Zoom Section ////////////////////////////////////////////////////////////////

script "WM_ToggleZoom" (void)
{
  WM_ToggleZoom();
}

function bool WM_IsWeaponBeingDeselected(void)
{
  ScriptCall("WMZScriptHelper", "IsWeaponBeingDeselected");
  int  playerN = PlayerNumber();
  bool isDeselected = GetUserCVar(playerN, "m8f_wm_ResultInt");
  return isDeselected;
}

function void WM_ToggleZoomWeapon(str weaponClass)
{
  if (WM_IsMelee()) { return; }
  if (WM_IsWeaponBeingDeselected()) { return; }

  int  playerN = PlayerNumber();
  bool isLaserConnected = GetUserCVar(playerN, "m8f_wm_LaserOnZoom");
  bool lowerWeapon = GetUserCVar(playerN, "m8f_wm_LowerWeaponOnZoom");

  if (isZoomed)
  {
    zoomFactor = 1.0;
    isZoomed = false;
    SetActorProperty(0, APROP_SPEED, 1.0);
    WM_MaybeToggleSlomoOnZoomOut();
  }
  else
  {
    zoomFactor = GetUserCVar(playerN, "m8f_wm_ZoomFactor");
    isZoomed = true;
    int zoomSpeedMultiplier = GetUserCvar(playerN, "m8f_wm_ZoomSpeedMultiplier");
    SetActorProperty(0, APROP_SPEED, zoomSpeedMultiplier);
    WM_MaybeToggleSlomoOnZoomIn();
  }

  ScriptCall("WMZScriptHelper", "SetZoomFactor", zoomFactor, weaponClass, lowerWeapon, isZoomed);

  if (isLaserConnected)
  {
    SetUserCVar(playerN, "m8f_wm_ShowLaserSight", WM_IsZoomed());
  }
}

function void WM_ToggleZoom(void)
{
  WM_ToggleZoomWeapon(WM_GetWeaponName(selectedWeapon));
}

function bool WM_IsZoomed(void)
{
  return isZoomed;
}

// Fallback Mode Section ///////////////////////////////////////////////////////

function void WM_GetFallbackWeapons(void)
{
  ScriptCall("WMZScriptHelper", "GetWeaponList");

  int playerN = PlayerNumber();
  str weaponData = GetUserCVarString(playerN, "m8f_wm_ResultString");

  int weaponDataLength = StrLen(weaponData);

  int current = 0;
  str currentToken = "";
  int iArray = 0;

  // received data format:
  // Class>Tag>Slot>Class>Tag>Slot ...

  for (int i = 0; i < weaponDataLength && current < MAX_WEAPONS_NUMBER; ++i)
  {
    int character = GetChar(weaponData, i);
    if (character != '>')
    {
      currentToken = StrParam(s:currentToken, c:character);
    }
    else
    {
      switch (iArray)
      {
      case 0: names[FALLBACK_SET][current] = currentToken; break;
      case 1: tags [FALLBACK_SET][current] = currentToken; break;
      case 2:
        slots[FALLBACK_SET][current] = WM_StrToInt(currentToken);
        break;
      case 3:
        priority[current] = WM_StrToInt(currentToken);
        ++current;
        break;
      }

      iArray = (iArray + 1) % 4;
      currentToken = "";
    }
  }

  weaponCounts[FALLBACK_SET] = current;
  weaponCount = current;

  WM_SortFallbackByPriority();
  WM_SortFallbackBySlot();

  /*
  for (int j = 0; j < current; ++j)
  {
    Log(s:names[FALLBACK_SET][j],
        s:" : ", s:tags [FALLBACK_SET][j],
        s:" : ", d:slots[FALLBACK_SET][j],
        s:" : ", d:priority[j]
        );
  }
  Log(i:weaponCounts[FALLBACK_SET]);
  ///*///
}

// works only for positive numbers
function int WM_StrToInt(str stringNumber)
{
  int result = 0;
  int length = StrLen(stringNumber);

  for (int i = 0; i < length; ++i)
  {
    result *= 10;
    result += GetChar(stringNumber, i) - '0';
  }

  return result;
}

function void WM_SortFallbackByPriority(void)
{
  // Quicksort, because it's simple and faster than insertion sort.
  WM_QuicksortByPriority(0, weaponCount - 1);
}

function void WM_QuicksortByPriority(int lo, int hi)
{
  if (lo < hi)
  {
    int p = WM_QuicksortByPriorityPartition(lo, hi);
    WM_QuicksortByPriority(lo,    p - 1);
    WM_QuicksortByPriority(p + 1, hi   );
  }
}

function int WM_QuicksortByPriorityPartition(int lo, int hi)
{
  int pivot = priority[hi];
  int i = lo - 1;

  for (int j = lo; j <= hi - 1; ++j)
  {
    if (priority[j] > pivot)
    {
      ++i;
      WM_SwapWeapons(i, j);
    }
  }
  WM_SwapWeapons(i + 1, hi);

  return i + 1;
}

function void WM_SortFallbackBySlot(void)
{
  // Insertion sort, because it's stable and simple.
  WM_InsertionSortBySlot();
}

function void WM_InsertionSortBySlot(void)
{
  for (int i = 1; i < weaponCount; ++i)
  {
    for (int j = i;
         j > 0 && WM_SlotIsHigher(WM_GetWeaponSlot(j - 1), WM_GetWeaponSlot(j));
         --j)
    {
      WM_SwapWeapons(j, j - 1);
    }
  }
}

// The main purpose of this function is that slot 0 is considered higher than
// other slots
function bool WM_SlotIsHigher(int slot1, int slot2)
{
  if (slot1 == 0) { slot1 = 99; }
  if (slot2 == 0) { slot2 = 99; }
  return slot1 > slot2;
}

// Inventory Controls Section //////////////////////////////////////////////////

#define N_QUICK_INVENTORY_ITEMS 3

function str WM_GetSelectedInventory(void)
{
  ScriptCall("WMZscriptHelper", "GetSelectedInventory");
  int playerN = PlayerNumber();
  return GetUserCVarString(playerN, "m8f_wm_ResultString");
}

function str WM_GetInventoryTag(str itemClass)
{
  ScriptCall("WMZscriptHelper", "GetInventoryTag", itemClass);
  int playerN = PlayerNumber();
  return GetUserCVarString(playerN, "m8f_wm_ResultString");
}

function str WM_GetQuickInventoryCVarName(int n)
{
  if (n >= N_QUICK_INVENTORY_ITEMS) { return ""; }

  str cvarName = StrParam(s:"m8f_wm_QuickInventoryItem", d:n);
  return cvarName;
}

function str WM_GetQuickInventoryItem(int n)
{
  str cvarName = WM_GetQuickInventoryCVarName(n);
  int playerN = PlayerNumber();
  str quickInventory = GetUserCVarString(playerN, cvarName);
  return quickInventory;
}

function void WM_SetQuickInventoryItem(int n, str quickInventory)
{
  str cvarName = WM_GetQuickInventoryCVarName(n);
  int playerN = PlayerNumber();
  SetUserCVarString(playerN, cvarName, quickInventory);
}

script "WM_MarkAsQuickInventoryItem" (int n)
{
  if (n >= N_QUICK_INVENTORY_ITEMS) { terminate; }

  str selectedInventory = WM_GetSelectedInventory();
  if (StrCmp(selectedInventory, "wm_none") == 0) { terminate; }

  WM_SetQuickInventoryItem(n, selectedInventory);
  str tag = WM_GetInventoryTag(selectedInventory);
  Log(s:tag, s:": marked as quick access #", i:n + 1);
}

script "WM_UseQuickInventoryItem" (int n)
{
  if (n >= N_QUICK_INVENTORY_ITEMS) { terminate; }

  UseInventory(WM_GetQuickInventoryItem(n));
}

// Fire Junk Section ///////////////////////////////////////////////////////////

script "WM_FireJunk" (void)
{
  PlaySound(0, "wmenu/throw");
  Delay(5);
  NoiseAlert(0, 0);
  int angle = GetActorAngle(0);
  int pitch = GetActorPitch(0);
  LineAttack(0, angle, pitch, 0, "WM_JunkPuff", "None", 2048.0, FHF_NOIMPACTDECAL);
}

// Game Detection Section //////////////////////////////////////////////////////

function bool WM_IsDoom1(void)
{
  str filtered = StrParam(l:"WM_GAME");
  bool doom1 = (StrCmp(filtered, "1") == 0);
  return doom1;
}

function bool WM_IsDoom2(void)
{
  str filtered = StrParam(l:"WM_GAME");
  bool doom2 = (StrCmp(filtered, "2") == 0);
  return doom2;
}

function bool WM_IsFreedoom(void)
{
  str filtered = StrParam(l:"WM_GAME");
  bool freedoom = (StrCmp(filtered, "3") == 0);
  return freedoom;
}

function bool WM_IsHarmony(void)
{
  str checkString = StrParam(l:"C1TEXT");
  str harmString = "HEADING DOWN YOU FINALLY HAVE";
  int harmLength = StrLen(harmString);
  bool isHarmony = StrICmp(harmString, StrLeft(checkString, harmLength)) == 0;
  return isHarmony;
}

function bool WM_IsEVP(void)
{
  bool isEVP = CheckClass("EVPBFGBall");
  return isEVP;
}

function bool WM_IsFlakesDoom(void)
{
  bool isFlakesDoom = CheckClass("FKHAR");
  return isFlakesDoom;
}

// Give Some Ammo Section //////////////////////////////////////////////////////

script "WM_GiveThisAmmo" (void)
{
  if (selectedWeapon == WEAPON_HOLSTERED) { terminate; }

  str weaponClass = WM_GetWeaponName(selectedWeapon);
  ScriptCall("WMZscriptHelper", "GiveThisAmmo", weaponClass);
}

// Infinite Slot 1 Ammo Section ////////////////////////////////////////////////

script "WM_GiveMinSlot2Ammo" (void)
{
  if (selectedWeapon == WEAPON_HOLSTERED) { terminate; }
  int slot = WM_GetWeaponSlot(selectedWeapon);
  if (slot != 2) { terminate; }

  str weaponClass = WM_GetWeaponName(selectedWeapon);
  ScriptCall("WMZscriptHelper", "GiveMinAmmo", weaponClass);
}

// Slomo Bullettime Section ////////////////////////////////////////////////////

function void WM_MaybeToggleSlomoOnOpen(void)
{
  int playerN = PlayerNumber();
  bool slomoOnMenuOpen = GetUserCVar(playerN, "m8f_wm_SlomoOnMenuOpen");
  if (slomoOnMenuOpen)
  {
    SetCVar("m8f_sm_externaltoggle", 1);
  }
}

function void WM_MaybeToggleSlomoOnClose(void)
{
  int playerN = PlayerNumber();
  bool slomoOnMenuOpen = GetUserCVar(playerN, "m8f_wm_SlomoOnMenuClose");
  if (slomoOnMenuOpen)
  {
    SetCVar("m8f_sm_externaltoggle", 1);
  }
}

function void WM_MaybeToggleSlomoOnZoomIn(void)
{
  int playerN = PlayerNumber();
  bool slomoOnMenuOpen = GetUserCVar(playerN, "m8f_wm_SlomoOnZoomIn");
  if (slomoOnMenuOpen)
  {
    SetCVar("m8f_sm_externaltoggle", 1);
  }
}

function void WM_MaybeToggleSlomoOnZoomOut(void)
{
  int playerN = PlayerNumber();
  bool slomoOnMenuOpen = GetUserCVar(playerN, "m8f_wm_SlomoOnZoomOut");
  if (slomoOnMenuOpen)
  {
    SetCVar("m8f_sm_externaltoggle", 1);
  }
}
