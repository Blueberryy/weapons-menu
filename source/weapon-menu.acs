#library "LIBWEAPONMENU"
#include "zcommon.acs"

#define MINIMAL_HOLD_TIME 1873
#define messageIdStart 191919


// Global variables ////////////////////////////////////////////////////////////
// To write to global variables, use only special functions.

bool menuIsEnabled  = false;
bool menuIsOpened   = false;
int  currentSet     = -1;

int  highlightedWeapon = 0;
int  selectedWeapon    = 0;
int  lastUsedWeapon    = 0;

int weaponCount = 0;
int step = 0;

// Weapons data section ////////////////////////////////////////////////////////

#define SETS_NUMBER 42
#define MAX_WEAPONS_NUMBER 50
#define AUTO_SET 26

// Known weapon sets and player classes:

str playerClassNames[SETS_NUMBER] =
{
  "DoomPlayer",          //  0. Standard
  "PerkDPlayer",         //  1. PerK's Smoother Weapon Animations Enhanced, Smooth Doom (2018-01-13)
  "EriPlayer",           //  2. Eriguns - Standard weapons
  "AltPlayer",           //  3. Eriguns - Extended weapons
  "HellPlayer",          //  4. Eriguns - Hell weapons
  "BD_DoomPlayer",       //  5. Beautiful Doom
  "FDPlutPlayer",        //  6. Final Doomer - Plutonia
  "FDTNTPlayer",         //  7. Final Doomer - TNT
  "FDDoom2Player",       //  8. Final Doomer - Doom 2
  "FDAliensPlayer",      //  9. Final Doomer - Ancient Aliens
  "FDJPCPPlayer",        // 10. Final Doomer - JPCP
  "FDBTSXPlayer",        // 11. Final Doomer - BTSX
  "FasPlayer",           // 12. Faspons
  "HXRTCPlayer",         // 13. HXRTC Project
  "FKPlayer",            // 14. Kriegsland
  "ComplexDoomPlayer",   // 15. Complex Doom V27a3
  "SaturnPlayer",        // 16. Weapons of Saturn October 31, 2017
  "DoomMarine",          // 17. Hard-Doom v8.2f
  "HereticPlayer",       // 18. Heretic
  "ChexPlayer",          // 19. Chex Quest (Single Player)
  "StrifePlayer",        // 20. Strife
  "ArgPlayer",           // 21. Argent (v0.5.3)
  "64DoomPlayer",        // 22. Doom 64 'weapons only' X (updated 5-29-2016)
  "DoomPlayerFixed",     // 23. Responsive Weapons + Faster Weapon Switching
  "Xplayer",             // 24. Dead Marine v0.9.3
  "ParkourPlayer",       // 25. Parkour v1.1
  "Autodetected",        // 26. Autodetected
  "Purist",              // 27. Brutal Doom 21 test feb24 - Purist
  "BDoomer",             // 28. Brutal Doom - Rifle Start
  "Doomer2",             // 29. Brutal Doom - Pistal Start
  "TacticalDoomer",      // 30. Brutal Doom - Tactical Mode
  "CollabWeaponGuy",     // 31. Combined Arms v1.0
  "Trailblazer_Doom",    // 32. Trailblazer v1.4b - Doom
  "Trailblazer_Heretic", // 33. Trailblazer v1.4b - Heretic
  "Trailblazer_Hexen",   // 34. Trailblazer v1.4b - Hexen
  "WWColaPlayer",        // 35. WW-Cola3
  "HexenColaPlayer",     // 36. WW-Cola3 - Hexen
  "Eilidh",              // 37. Netronian Chaos v3
  "SquarePlayer",        // 38. Adventures of Square, Ep 1-2
  "CaptainBlazkowicz",   // 39. Doom Incarnate, v1.5
  "msx_player",          // 40. Project MSX 0.2a
  "DoomNukem",           // 41. Accessories to Murder
};

int weaponCounts[SETS_NUMBER] =
{
  9,  // Standard
  10, // PerK's Smoother Weapon Animations Enhanced + Smooth Doom
  9, 13, 13, // Eriguns
  9,  // Beautiful Doom
  9, 9, 9, 9, 8, 9, // Final Doomer: Plutonia, TNT, Doom2, AA, JPCP, BTSX
  9,  // Faspons
  50, // HXRTC Project!
  22 + 5, // Kriegsland
  18, // Complex Doom
  11, // Weapons of Saturn
  14, // Hard-Doom
  8,  // Heretic
  8,  // Chex Quest
  8,  // Strife
  11, // Argent
  15, // Doom 64 X
  9,  // Responsive Weapons + Faster Weapon Switching
  9,  // Dead Marine
  12, // Parkour
  0,  // Special - autodetected
  9,  // Brutal Doom - Purist
  22, // Brutal Doom - BDoomer
  22, // Brutal Doom - Doomer2
  22, // Brutal Doom - TacticalDoomer
  12, // Combined Arms
  12, // Trailblazer - Doom
  12, // Trailblazer - Heretic
  12, // Trailblazer - Hexen
  8,  // WW-Cola3
  8,  // WW-Cola3 - Hexen
  24, // Netronian Chaos
  10, // Adventures of Square
  16, // Doom Incarnate
  8,  // Project MSX
  10, // Accessories to Murder
};

int slots[SETS_NUMBER][MAX_WEAPONS_NUMBER] =
{
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Standard

  // PerK's Smoother Weapon Animations Enhanced + Smooth Doom
  { 1, 1, 2, 2, 3, 3, 4, 5, 6, 7 },

  // Eriguns
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 8 },
  { 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9 },

  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Beautiful Doom

  // Final Doomer
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },

  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Faspons

  { // HXRTC Project
    1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5,
    6, 6, 6, 6, 6,
    7, 7, 7, 7, 7,
    8, 8, 8, 8, 8,
    9, 9, 9, 9, 9,
    0, 0
  },

  { // Kriegsland
    1, 1, 1,
    2, 2, 2,
    3, 3,
    4, 4,
    5, 5, 5,
    6, 6, 6,
    7, 7, 7,
    8, 8, 8,
    9, 9, 9, 9, 9, // cross akimbos
  },

  { // Complex Doom
    1, 1,
    2,
    3, 3, 3, 3,
    4, 4,
    5, 5,
    6, 6, 6,
    7, 7, 7,
    8,
  },

  { 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7 }, // Weapons of Saturn

  { 1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7 }, // Hard-Doom

  { 1, 1, 2, 3, 4, 5, 6, 7 }, // Heretic

  { 1, 1, 2, 3, 4, 5, 6, 7 }, // Chex Quest

  { 1, 2, 3, 4, 5, 6, 7, 8 }, // Strife

  { 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7 }, // Argent

  { 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7 }, // Doom 64 X

  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Responsive Weapons + Faster Weapon Switching

  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Dead Marine

  { 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9 }, // Parkour

  { }, // Special - autodetected

  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Brutal Doom - Purist
  { 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8 }, // BDoomer
  { 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8 }, // Doomer2
  { 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8 }, // Tactical

  { 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 8 }, // Combined Arms

  { 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7 }, // Trailblazer
  { 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7 },
  { 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7 },

  { 1, 2, 2, 3, 4, 5, 6, 7 }, // WW-Cola3
  { 1, 2, 2, 3, 4, 5, 6, 7 }, // WW-Cola3 - Hexen

  { // Netronian Chaos
    1, 1, 1,
    2, 2, 2,
    3, 3, 3,
    4, 4, 4,
    5, 5, 5,
    6, 6, 6,
    7, 7, 7,
    8, 8, 8
  },

  { 1, 1, 2, 2, 3, 3, 4, 5, 6, 7 }, // Adventures of Square

  { // Doom Incarnate
    1, 1,
    2, 2,
    3, 3, 3,
    4, 4,
    5, 5,
    6, 6,
    7, 7,
    9
  },

  { 1, 2, 3, 4, 5, 6, 7, 8 }, // Project MSX

  { 1, 2, 2, 2, 3, 3, 4, 5, 6, 7 }, // Accessories to Murder

};

str names[SETS_NUMBER][MAX_WEAPONS_NUMBER] =
{
  { // Standard
    "Chainsaw", "Fist",
    "Pistol",
    "SuperShotgun", "Shotgun",
    "Chaingun",
    "RocketLauncher",
    "PlasmaRifle",
    "BFG9000"
  },

  { // PerK's Smoother Weapon Animations Enhanced + Smooth Doom
    "Z86Chainsaw", "PerkFist",
    "Rifle", "PerkPistol",
    "PerkSuperShotgun", "PerkShotgun",
    "Z86Chaingun",
    "PerkRocketLauncher",
    "BloxPlasmaRifle",
    "Z86BFG9000"
  },

  {
    "EriChainsaw", "EriFist",
    "EriPistol",
    "EriSuperShotgun",
    "EriShotgun",
    "EriMachinegun",
    "EriRocketLauncher",
    "EriPlasmaRifle",
    "EriBFG9000"
  },
  {
    "EriChainsaw", "EriFist",
    "AltPistol",
    "EriAutoShotgun", "AltSuperShotgun", "EriShotgun",
    "EriGatlingGun", "EriMachinegun",
    "EriMissileLauncher", "EriRocketLauncher",
    "EriPlasmaRifle",
    "EriBFG9000",
    "EriGrenadeLauncher"
  },
  {
    "EriBlade", "EriFist",
    "EriSuperImmolator", "EriImmolator",
    "EriBloodbane",
    "EriNailgun",
    "EriMauler",
    "EriHellforge", "EriIrebolt",
    "EriCaster",
    "EriHydra", "EriBasilisk",
    "EriSoulreaver"
  },

  {
    "BD_Chainsaw", "BD_Fist",
    "BD_Pistol",
    "BD_SuperShotgun", "BD_Shotgun",
    "BD_Chaingun",
    "BD_RocketLauncher",
    "BD_PlasmaRifle",
    "BD_BFG9000"
  },

  {
    "FDPlutChainsaw", "FDPlutFist",
    "FDPlutPistol",
    "FDPlutSuperShotgun", "FDPlutShotgun",
    "FDPlutChaingun",
    "FDPlutRocketLauncher",
    "FDPlutPlasmaRifle",
    "FDPlutBFG9000"
  },
  {
    "FDTNTChainsaw", "FDTNTFist",
    "FDTNTPistol",
    "FDTNTSuperShotgun", "FDTNTShotgun",
    "FDTNTChaingun",
    "FDTNTRocketLauncher",
    "FDTNTPlasmaRifle",
    "FDTNTBFG9000"
  },
  {
    "FDDoom2Chainsaw", "FDDoom2Fist",
    "FDDoom2Pistol",
    "FDDoom2SuperShotgun", "FDDoom2Shotgun",
    "FDDoom2Chaingun",
    "FDDoom2RocketLauncher",
    "FDDoom2PlasmaRifle",
    "FDDoom2BFG9000"
  },
  {
    "FDAliensChainsaw", "FDAliensFist",
    "FDAliensPistol",
    "FDAliensSuperShotgun", "FDAliensShotgun",
    "FDAliensChaingun",
    "FDAliensRocketLauncher",
    "FDAliensPlasmaRifle",
    "FDAliensBFG9000"
  },
  {
    "FDJPCPFist",
    "FDJPCPPistol",
    "FDJPCPSuperShotgun", "FDJPCPShotgun",
    "FDJPCPChaingun",
    "FDJPCPRocketLauncher",
    "FDJPCPPlasmaRifle",
    "FDJPCPBFG9000"
  },
  {
    "FDBTSXChainsaw", "FDBTSXFist",
    "FDBTSXPistol",
    "FDBTSXSuperShotgun", "FDBTSXShotgun",
    "FDBTSXChaingun",
    "FDBTSXRocketLauncher",
    "FDBTSXPlasmaRifle",
    "FDBTSXBFG9000"
  },

  {
    "Motorsaw", "Knuckles",
    "CombatRifle",
    "DoubleBarrel", "Riotgun",
    "Minigun",
    "RPG",
    "PulseRifle",
    "BFG"
  },

  {
    "Z-Gun", "DoomChainsaw", "Axe", "Knife", "DoubleKnuckles", "OmicronRaygun",
    "LightMachinegun", "MP40", "DualColt1911", "Colt1911", "DualBerettas", "Beretta",
    "W-Shotgun", "AutoShotgun", "QuadShotgun", "CoachGun", "RiotShotgun",
    "HeavyChaingun", "M134Minigun", "DemonkillerCarbine", "M24SniperRifle", "DualCombatRifles", "CombatRifle",
    "MultiElementalCannon", "CryogenicRepeater", "NapalmLauncher", "SawThrower", "Saturn-V",
    "GatlingLasergun", "DualPulseRifles", "PulseRifle", "DualPlasmaZappers", "PlasmaZapper",
    "BlackHoleMaker", "BFG-X", "RailgunV20", "NeedleBuster", "ProtoBlaster",
    "ChillyIceBombard", "FlameCannon", "ChillerCrossbow", "NightmareDoubleRaygun", "HellMissileLauncher",
    "AcidArbalest", "ToxicWand", "EvilWarriorShield", "UACChemicalSpray", "BlowGun",
    "LandMineWeapon", "HandGrenadeWeapon",
  },

  { // Kriegsland
    "HDGrenades", "HDChainsaw", "HDKnife",
    "HDBlaster", "HDHandgun", "HDPistol",
    "HDSuperShotgun", "HDShotgun",
    "HDChaingun", "HDMachinegun",
    "HDPanzerfaust", "HDFlareGun", "HDRocketLauncher",
    "HDSonicGun", "HDLightningGun", "HDPlasmaRifle",
    "HDLaserGun", "HDLurdinha", "HDBFG9000",
    "HDCarbine", "HDGewehr", "HDRifle",
    "HDCrossAkimbo5", "HDCrossAkimbo4", "HDCrossAkimbo3", "HDCrossAkimbo2", "HDCrossAkimbo1",
  },

  { // Complex Doom
    "Chainsaw ", "Melee",
    "Handgun",
    "Quad Barrel Shotgun", "Double Barrel Shotgun", "Assault Shotgun", "Combat Shotgun",
    "Minigun ", "Assault Rifle",
    "Grenade Launcher", "Rocket Launcher",
    "Railgun ", "Demon Tech Rifle", "Plasma Rifle",
    "Demon Tech BFG10K", "BFG10K ", "BFG9500",
    "MP40",
  },

  { // Weapons of Saturn
    "Motorsaw", "Knuckles",
    "1911", "Beretta",
    "Coachgun", "Riotgun",
    "Minigun", "MachineRifle",
    "SaturnV",
    "NovaRifle",
    "TITAN",
  },

  { // Hard-Doom
    "Chainsaw~", "Fist~",
    "Pistol~",
    "Quad-Shotgun", "SuperShotgun~", "Shotgun~",
    "Minigun~", "Chaingun~",
    "GrenadeLauncher~", "RocketLauncher~",
    "PlasmaRifle~", "Sonic Railgun",
    "BFG10K~", "BFG9000~",
  },

  { // Heretic
    "Gauntlets", "Staff",
    "GoldWand",
    "Crossbow",
    "Blaster",
    "SkullRod",
    "PhoenixRod",
    "Mace",
  },

  { // Chex Quest
    "SuperBootspork",
    "Bootspoon",
    "MiniZorcher",
    "LargeZorcher",
    "RapidZorcher",
    "ZorchPropulsor",
    "PhasingZorcher",
    "LAZDevice",
  },

  { // Strife
    "PunchDagger",
    "StrifeCrossbow",
    "AssaultGun",
    "MiniMissileLauncher",
    "StrifeGrenadeLauncher",
    "FlameThrower",
    "Mauler",
    "Sigil",
  },

  { // Argent
    "ArgChainsaw",
    "ArgFist",
    "ArgPistol",
    "ArgSuperShotgun",
    "ArgShotgun",
    "ArgChaingun",
    "ArgHeavyAR",
    "ArgRocketLauncher",
    "ArgGaussCannon",
    "ArgPlasmaRifle",
    "ArgBFG9000",
  },

  { // Doom 64 X
    "64Chainsaw", "64Fist",
    "64Uzi", "64Pistol",
    "64Devastator", "64SuperShotgun", "64Shotgun",
    "64Nailgun", "64Chaingun",
    "64Flamethrower", "64RocketLauncher",
    "64Railgun", "64PlasmaRifle",
    "Unmaker", "64BFG9000",
  },

  { // Responsive Weapons + Faster Weapon Switching
    "ChainsawFixed", "FistFixed",
    "PistolFixed",
    "SuperShotgunFixed", "ShotgunFixed",
    "ChaingunFixed",
    "RocketLauncherFixed",
    "PlasmaRifleFixed",
    "BFG9000Fixed"
  },

  { // Dead Marine
    "XtremeSaw", "Xtremefist",
    "XtremePistol",
    "XtremeSSG", "XtremeShotgun",
    "XtremeChaingun",
    "XtremeRLauncher",
    "XtremePlasma",
    "XtremeBFG"
  },

  { // Parkour
    "PkChainsaw", "PkFist",
    "PkPistolAkimbo", "PkPistol",
    "PkDoubleShotguns", "PkShotgun",
    "PkChaingun",
    "PkRocketLauncher",
    "PkPlasmaRifle",
    "PkBFG9000",
    "PkCyberLauncher",
    "PkSuperChain",
  },

  { }, // Special - autodetected

  { // Brutal Doom Purist
    "ClassicSaw", "ClassicFist",
    "ClassicPistol",
    "ClassicSSG", "ClassicShotgun",
    "ClassicChaingun",
    "ClassicRocketLauncher",
    "ClassicPlasmaRifle",
    "VanillaBFG9000"
  },

  { // Brutal Doom - BDoomer
    "Melee_Attacks", "Chain_saw", "BrutalAxe",
    "MP40", "BrutalSMG", "BrutalPistol",
    "SSG", "Shot_Gun", "AssaultShotgun",
    "HitlersBuzzsaw", "Minigun", "Rifle", "Machinegun",
    "Rocket_Launcher", "GrenadeLauncher",
    "Plasma_Gun", "Railgun",
    "BIG_FUCKING_GUN", "Unmaker", "BFG10k",
    "FlameCannon", "HellishMissileLauncher"
  },

  { // Brutal Doom - Doomer2
    "Melee_Attacks", "Chain_saw", "BrutalAxe",
    "MP40", "BrutalSMG", "BrutalPistol",
    "SSG", "Shot_Gun", "AssaultShotgun",
    "HitlersBuzzsaw", "Minigun", "Rifle", "Machinegun",
    "Rocket_Launcher", "GrenadeLauncher",
    "Plasma_Gun", "Railgun",
    "BIG_FUCKING_GUN", "Unmaker", "BFG10k",
    "FlameCannon", "HellishMissileLauncher"
  },

  { // Brutal Doom - TacticalDoomer
    "Melee_Attacks", "Chain_saw", "BrutalAxe",
    "MP40", "BrutalSMG", "BrutalPistol",
    "SSG", "Shot_Gun", "AssaultShotgun",
    "HitlersBuzzsaw", "Minigun", "Rifle", "Machinegun",
    "Rocket_Launcher", "GrenadeLauncher",
    "Plasma_Gun", "Railgun",
    "BIG_FUCKING_GUN", "Unmaker", "BFG10k",
    "FlameCannon", "HellishMissileLauncher"
  },

  { // Combined Arms
    "SkillAxe", "CFSFists",
    "D3PS",
    "particlesmasher", "BitchinShotgun",
    "Gnasher",
    "CygnusRL",
    "BusterRifle",
    "daibatana",
    "havocrebounder", "tsbrick", "FlareGun"
  },

  { // Trailblazer
    "Macheterang", "SpikebombWeapon",
    "Colts", "Sidekick",
    "Fleshrend", "ChromeJustice",
    "Leadspitter", "FMG",
    "Bitchmaker", "Patriarch",
    "Skullthrottle",
    "Nutcracker",
  },
  { // Trailblazer
    "Macheterang", "SpikebombWeapon",
    "Colts", "Sidekick",
    "Fleshrend", "ChromeJustice",
    "Leadspitter", "FMG",
    "Bitchmaker", "Patriarch",
    "Skullthrottle",
    "Nutcracker",
  },
  { // Trailblazer
    "Macheterang", "SpikebombWeapon",
    "Colts", "Sidekick",
    "Fleshrend", "ChromeJustice",
    "Leadspitter", "FMG",
    "Bitchmaker", "Patriarch",
    "Skullthrottle",
    "Nutcracker",
  },

  { // WW-Cola3
    "ColaHandgun",
    "PumpShotgun", "DualPumpShotgun",
    "CardThrower",
    "PlasmaAutorifle",
    "MissileLauncher",
    "Piledriver",
    "ToothpasteLaser",
  },
  { // WW-Cola3
    "ColaHandgun",
    "PumpShotgun", "DualPumpShotgun",
    "CardThrower",
    "PlasmaAutorifle",
    "MissileLauncher",
    "Piledriver",
    "ToothpasteLaser",
  },

  { // Netronian Chaos
    "LB1000PileBanger", "AnaikaDagger", "M101Blade",
    "EG10HeavyPistol", "V57BurstPistol", "V96ServicePistol",
    "FASR33AssaultSupporter", "VS4Sweeper", "VS2Riotgun",
    "PAG20PDW", "V80BSMG", "V88Carbine",
    "VARACarbine", "AG100Machinegun", "V74ARifle",
    "M12FMGR", "V32AARifle", "V50MLauncher",
    "M189Auto", "V99AThrower", "VE1Coilgun",
    "HeavyBarrel", "VM201TD", "Ver110VC"
  },

  { // Adventures of Square
    "PaintGuns", "PaintGun",
    "Oozis", "Oozi",
    "Quadcannon", "Shotbow",
    "PaintCannon",
    "HellShellLauncher",
    "Sceptre",
    "Defibrillator"
  },

  { // Doom Incarnate
    "SMG", "Handgun",
    "Paratrooper", "ScytheMagnum",
    "Grimmhammer", "DoubleShotgun", "InfernoShotgun",
    "GatlingGun", "AssaultRifle",
    "NapalmKraftWerk", "Kampfpistole",
    "LaserKraftWerk", "PlazmaRifle",
    "Ubergewehr", "Lasergewehr",
    "CrossedWield"
  },

  { // Project MSX
    "RegularFists",
    "golampistol",
    "hydrashotgun",
    "barracudarifle",
    "raptorshotgun",
    "tauruscannon",
    "chimerarifle",
    "orionSniper"
  },

  { // Accessories to Murder
    "Sledge",
    "Revolver", "DNDualPistol", "DNPistol",
    "TrenchShotgun", "DoubleShotgun",
    "DNRifle",
    "DNRocketLauncher",
    "DNChaingun",
    "DNBFG"
  },

}; // end of actor/class names /////////////////////////////////////////////////

str printableNames[SETS_NUMBER][MAX_WEAPONS_NUMBER] =
{
  { // Doom
    "Chainsaw", "Brass Knuckles",
    "Pistol",
    "Super Shotgun", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG 9000"
  },

  { // PerK's Smoother Weapon Animations Enhanced + Smooth Doom
    "Chainsaw", "Fist",
    "Rifle", "Pistol",
    "Super Shotgun", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG9000"
  },

  { // Eriguns
    "Chainsaw", "Fist",
    "Pistol",
    "Super Shotgun", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG9000"
  },
  {
    "Chainsaw", "Fist",
    "Pistol",
    "Auto Shotgun", "Super Shotgun", "Shotgun",
    "Gatling Gun", "Machinegun",
    "Missile Launcher", "Rocket Launcher",
    "Plasma Rifle",
    "BFG9000",
    "Grenade Launcher"
  },
  {
    "Vorpal Blade", "Fist",
    "Super Immolator", "Immolator",
    "Bloodbane",
    "Nailgun",
    "Mauler",
    "Hellforge", "Irebolt",
    "Soul Caster",
    "Hydra", "Basilisk",
    "Soul Reaver"
  },

  { // Beautiful Doom
    "Chainsaw", "Fist",
    "Pistol",
    "Super Shotgun", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG9000"
  },

  { // Final Doomer
    "Power Saw", "Melee",
    "Ol' Faithful",
    "Super Shotgun", "Scoped Shotgun",
    "Machine Gun",
    "Grenade Launcher",
    "Heavy Machine Gun",
    "Quantum Accelerator"
  },
  {
    "Halderman Device", "Melee",
    "Prototype Pistol",
    "Burst Shotgun", "Tactical Shotgun",
    "Dual Uzis",
    "Missile Launcher",
    "Maser",
    "Incursion Annihilator"
  },
  {
    "Chainsaw", "Melee",
    "Pistol",
    "Super Shotgun", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG 9000"
  },
  {
    "Stasis Bow", "Trench Knife",
    "Ancient Pistol",
    "Hybrid SSG", "Ancient Shotgun",
    "Ancient AK",
    "Photon Scepter",
    "Alien Elite Weapon",
    "Illuminator"
  },
  {
    "Katana",
    "Silenced Pistol",
    "Neutron Cascader", "Neutron Pulser",
    "Burst Needler",
    "Prism Cannon",
    "Ofuda Caster",
    "Onmyou Devastator"
  },
  {
    "NanoCore", "Power Fist",
    "Charge Pistol",
    "Machreaper", "Arc Blaster",
    "Pulse Rifle",
    "Pulse Cannon",
    "Plasma Vulcan",
    "X-Spark Cannon"
  },

  { // Faspons
    "Chainsaw", "Knuckles",
    "Combat Rifle",
    "Double Barrel Shotgun", "Riotgun",
    "Minigun",
    "RPG",
    "Pulse Rifle",
    "BFG9000"
  },

  {
    "Z-Gun", "Chainsaw", "Hatchet", "Knife", "Double Knuckles", "Omicron Raygun",
    "Light Machinegun", "MP40", "Dual Colt 1911", "Colt 1911", "Dual Berettas", "Beretta",
    "W-Shotgun", "Auto Shotgun", "Quad Shotgun", "Coach Gun", "Riot Shotgun",
    "Heavy Chaingun", "M134 Minigun", "Demonkiller Carbine", "M24 Sniper Rifle", "Dual Combat Rifles", "Combat Rifle",
    "Multi-Elemental Cannon", "Cryogenic Repeater", "Napalm Launcher", "Saw Thrower", "Saturn-V",
    "Gatling Lasergun", "Dual Pulse Rifles", "Pulse Rifle", "Dual Plasma Zappers", "Plasma Zapper",
    "Black Hole Maker", "BFG-X", "Railgun 2.0", "Needle Buster", "Proto Blaster",
    "Chilly Mancubus' Ice Bombard", "Mancubi's Flame Cannon", "Arctic Archer's Chiller Crossbow", "Nightmare Reaper's Double Raygun", "Skeleton's Hell Missile Launcher",
    "Acid Arbalest", "Toxic Wand", "Evil Warrior's Shield", "UAC Chemical Spray", "Poison Dart Blowgun",
    "Land Mine", "Hand Grenade",
  },

  { // Kriegsland
    "Stielhandgranate-68", "Elektroshocker", "Kampfmesser 84",
    "DL-44 FuturPistole-Blaster", "Mauser M972-S2", "Luger P-58",
    "Jadtfaust Wunderfilnte-8", "Luftwaffe DP-65",
    "MP-86s", "StG-60",
    "Panzerkreuz Mk. III", "Kampfpistole", "Lawine-6",
    "Schallkraftwerk", "Blitzgewehr", "Flammenfaust",
    "Ekelhaftwaffe", "MG-92", "VFR-245 Puls-Kanone",
    "Bombenschuss", "Gewehr-1953", "KAR 82a-2K",
    "Cross Thermals", "Cross Launchers", "Cross Machineguns", "Cross Shotguns", "Cross Pistols",
  },

  { // Complex Doom
    "Chainsaw", "Melee",
    "Handgun",
    "Quad Barrel Shotgun", "Double Barrel Shotgun", "Assault Shotgun", "Combat Shotgun",
    "Minigun", "Assault Rifle",
    "Grenade Launcher", "Rocket Launcher",
    "Railgun", "Demon Tech Rifle", "Plasma Rifle",
    "Demon Tech BFG10K", "BFG10K", "BFG9500",
    "MP40",
  },

  { // Weapons of Saturn
    "Chain Saw", "Knuckles",
    "1911", "Beretta",
    "Coach Gun", "Riot Gun",
    "Rotary Cannon", "Machine Rifle",
    "Saturn V",
    "Nova Rifle",
    "Titan",
  },

  { // Hard-Doom
    "Chainsaw", "Fist",
    "Pistol",
    "Quad-Shotgun", "Super Shotgun", "Shotgun",
    "Minigun", "Chaingun",
    "Grenade Launcher", "Rocket Launcher",
    "Plasma Rifle", "Sonic Railgun",
    "BFG10K", "BFG9000",
  },

  { // Heretic
    "Gauntlets of the Necromancer", "Staff",
    "Elven Wand",
    "Ethereal Crossbow",
    "Dragon Claw",
    "Hellstaff",
    "Phoenix Rod",
    "Firemace",
  },

  { // Chex Quest
    "Super Bootspork", "Spoon",
    "Mini Zorcher",
    "Large Zorcher",
    "Rapid Zorcher",
    "Zorch Propulsor",
    "Phasing Zorcher",
    "LAZ Device",
  },

  { // Strife
    "Dagger",
    "Crossbow",
    "Assault Gun",
    "Mini Missile Launcher",
    "Grenade Launcher",
    "Flame Thrower",
    "Mauler",
    "SIGIL",
  },

  { // Argent
    "Chainsaw",
    "Fists",
    "Pistol",
    "Super Shotgun",
    "Combat Shotgun",
    "Chaingun",
    "Heavy Assault Rifle",
    "Rocket Launcher",
    "Gauss Cannon",
    "Plasma Rifle",
    "BFG 9000",
  },

  { // Doom 64 X
    "Chainsaw", "Fist",
    "Uzi", "Pistol",
    "Devastator", "Super Shotgun", "Shotgun",
    "Nailgun", "Chaingun",
    "Flamethrower", "Rocket Launcher",
    "Railgun", "Plasma Rifle",
    "Unmaker", "BFG 9000",
  },

  { // Responsive Weapons + Faster Weapon Switching
    "Chainsaw", "Brass Knuckles",
    "Pistol",
    "Super Shotgun", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG 9000"
  },

  { // Dead Marine
    "Chainsaw", "Brass Knuckles",
    "Pistol",
    "Super Shotgun", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG 9000"
  },

  { // Parkour
    "Chainsaw", "Fists",
    "Akimbo Pistols", "Pistol",
    "Dual Sawnoffs", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG 9000",
    "Cyber Launcher",
    "Super Chaingun",
  },

  { }, // Special - autodetected

  { // Brutal Doom Purist
    "Chainsaw", "Brass Knuckles",
    "Pistol",
    "Super Shotgun", "Shotgun",
    "Chaingun",
    "Rocket Launcher",
    "Plasma Rifle",
    "BFG 9000"
  },

  { // Brutal Doom - BDoomer
    "Melee", "Chainsaw", "Axe",
    "MP40", "SMG", "Pistol",
    "SSG", "Shotgun", "AA-12 Assault Shotgun",
    "Hitler's Buzzsaw", "Minigun", "Assault Rifle", "Machine Gun",
    "Rocket Launcher", "Grenade Launcher",
    "Plasma Gun", "Railgun",
    "BFG-9000", "Unmaker", "BFG10K",
    "Flame Cannon", "Hellish Missile Launcher"
  },

  { // Brutal Doom - Doomer2
    "Melee", "Chainsaw", "Axe",
    "MP40", "SMG", "Pistol",
    "SSG", "Shotgun", "AA-12 Assault Shotgun",
    "Hitler's Buzzsaw", "Minigun", "Assault Rifle", "Machine Gun",
    "Rocket Launcher", "Grenade Launcher",
    "Plasma Gun", "Railgun",
    "BFG-9000", "Unmaker", "BFG10K",
    "Flame Cannon", "Hellish Missile Launcher"
  },

  { // Brutal Doom - TacticalDoomer
    "Melee", "Chainsaw", "Axe",
    "MP40", "SMG", "Pistol",
    "SSG", "Shotgun", "AA-12 Assault Shotgun",
    "Hitler's Buzzsaw", "Minigun", "Assault Rifle", "Machine Gun",
    "Rocket Launcher", "Grenade Launcher",
    "Plasma Gun", "Railgun",
    "BFG-9000", "Unmaker", "BFG10K",
    "Flame Cannon", "Hellish Missile Launcher"
  },

  { // Combined Arms
    "Lilk's Axe", "Fists",
    "Genka-12",
    "Particle Smasher", "Shotgun",
    "Mk. 2 'Gnasher' Nailgun",
    "Cygnus Rocket Launcher",
    "Buster Rifle",
    "Daibatana",
    "Havoc Rebounder", "Plakanomicon", "ZT Prototype Flare Gun"
  },

  { // Trailblazer
    "Macheterang", "Spikebombs",
    "Cradle & Grave", "Sidekick",
    "Fleshrend", "Chrome Justice",
    "Leadspitter", "F.M.G.",
    "Bitchmaker", "Patriarch",
    "Skullthrottle",
    "Nutcracker",
  },
  { // Trailblazer
    "Macheterang", "Spikebombs",
    "Cradle & Grave", "Sidekick",
    "Fleshrend", "Chrome Justice",
    "Leadspitter", "F.M.G.",
    "Bitchmaker", "Patriarch",
    "Skullthrottle",
    "Nutcracker",
  },
  { // Trailblazer
    "Macheterang", "Spikebombs",
    "Cradle & Grave", "Sidekick",
    "Fleshrend", "Chrome Justice",
    "Leadspitter", "F.M.G.",
    "Bitchmaker", "Patriarch",
    "Skullthrottle",
    "Nutcracker",
  },

  { // WW-Cola3
    "Marston R-1 Techvolver",
    "KS-23 Shotgun", "Dual KS-23 Shotguns",
    "Kare Brand Cards",
    "Plasma Autorifle",
    "Sidewinder Missile Launcher",
    "Piledriver",
    "Toothpaste Laser",
  },
  { // WW-Cola3
    "Marston R-1 Techvolver",
    "KS-23 Shotgun", "Dual KS-23 Shotguns",
    "Kare Brand Cards",
    "Plasma Autorifle",
    "Sidewinder Missile Launcher",
    "Piledriver",
    "Toothpaste Laser",
  },

  { // Netronian Chaos
    "Pile Banger Glove", "Anaika Hunting Daggers", "Digitalblade",
    "Heavy Caliber Pistol", "Burst Pistol", "Service Pistol",
    "Assault Supporter", "Hand Sweeper", "Riotgun",
    "Personal Defence Arm", "Burst SMG", "Machine Carbine",
    "Semi Auto Rifle", "Squad Support Gun", "Combat Rifle",
    "Cyro Grenade Bouncer", "Anti Armor Rifle", "Missile Launcher",
    "Full Auto LAWF", "Personal Annihilator", "Semi Coil Carbine",
    "Fierce Caliber", "Tri Desolator", "Heavy Vulcan"
  },

  { // Adventures of Square
    "Dual Paint Guns", "Paint Gun",
    "Dual Oozis", "Oozi",
    "Quad Cannon", "Shotbow",
    "Paintgun Cannon",
    "Hellshell Launcher",
    "Cresceptre",
    "Defibrillator"
  },

  { // Doom Incarnate
    "Sub-Machine Gun", "Handgun",
    "Paratrooper Rifle", "Scythe Magnum",
    "Grimmhammer", "Super Shotgun", "Inferno Shotgun",
    "Gatling Gun", "Assault Rifle",
    "NapalmKraftWerk", "Kampfpistole",
    "LaserKraftWerk", "Plasma Rifle",
    "Ubergewehr", "Lasergewehr",
    "Crossed Wield"
  },

  { // Project MSX
    "Fists",
    "Golam Pistol",
    "Hydra Shotgun",
    "Barracuda Rifle",
    "Raptor NailShotgun",
    "Taurus AutoCannon",
    "Chimaera Pulse Rifle",
    "Orion Gauss Cannon"
  },

  { // Accessories to Murder
    "Sledge Hammer",
    "Revolver", "Pistols (Akimbo)", "Pistol",
    "Shotgun", "Sawed-Off",
    "Assault Rifle",
    "Rocket Launcher",
    "Chaingun",
    "Bergmann Field Generator"
  },

}; // end of printable names

bool isInInventory[MAX_WEAPONS_NUMBER];

function bool WM_IsSecretWeapon(int wNumber)
{
  switch (currentSet)
  {

    // Smooth Doom Rifle
    case  1: return (wNumber == 2);

    case 25: return (wNumber == 2 || wNumber == 10 || wNumber == 11);
    case 28: return (wNumber == 3 || wNumber == 9);
    case 29: return (wNumber == 3 || wNumber == 9);
    case 30: return (wNumber == 3 || wNumber == 9);
    case 31: return (wNumber == 9 || wNumber == 10 || wNumber == 11);

    // Accessories to Murder
    case 41: return (wNumber == 2 || wNumber == 3);
  }

  return false;
}


// Weapon data access functions ////////////////////////////////////////////////

function int WM_GetWeaponSlot(int weaponNumber)
{
  return slots[currentSet][weaponNumber];
}

function str WM_GetWeaponName(int weaponNumber)
{
  return names[currentSet][weaponNumber];
}

function str WM_GetPrintableWeaponName(int weaponNumber)
{
  return printableNames[currentSet][weaponNumber];
}

// Returns weaponNumber of next weapon in this slot, or -1 if there is no more
// weapons in this slot.
function int WM_GetWeaponSibling(int weaponNumber)
{
  int thisWeaponSlot = WM_GetWeaponSlot(weaponNumber);

  int playerN = PlayerNumber();
  int cycleValue = GetUserCVar(playerN, "M8fWMCycle");
  bool cycle = (cycleValue <= 1) && (cycleValue != 0);

  if (!cycle)
  {
    int next = weaponNumber + 1;
    if (next >= weaponCount) { return -1; }
    int nextSlot = WM_GetWeaponSlot(next);
    if (nextSlot != thisWeaponSlot) { return -1; }
    return next;
  }

  for (int i = 0; i < weaponCount; ++i)
  {
    int w = (weaponNumber + i) % weaponCount;
    if (w != weaponNumber && WM_GetWeaponSlot(w) == thisWeaponSlot)
    {
      return w;
    }
  }

  return -1;
}

function int getWeaponBySlot(int slotNumber)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    if (slotNumber == WM_GetWeaponSlot(i) && WM_IsInInventory(i))
    {
      return i;
    }
  }

  return -1;
}


// Printing Weapons Menu functions /////////////////////////////////////////////

function void WM_UpdateMenu(void)
{
  if (menuIsOpened) { WM_PrintMenu();   }
  else              { WM_ClearScreen(); }
}

function void WM_ClearScreen(void)
{
  // when menu is disabled, weapon count is 0
  HudMessage(s:""; HUDMSG_PLAIN, messageIdStart, CR_RED, 0.0, 0.0, 0);
  for (int i = 1; i < weaponCount; ++i)
  {
    int id = messageIdStart + i;
    HudMessage(s:""; HUDMSG_PLAIN, id, CR_RED, 0.0, 0.0, 0);
  }
}

function void WM_PrintMenu(void)
{
  int playerN = PlayerNumber();
  bool disableOutput = GetUserCVar(playerN, "M8fWeaponMenuDisableNativeOutput");
  if (disableOutput) { return; }

  if (!menuIsEnabled)
  {
    int stubXStart = GetUserCVar(playerN, "M8FWeaponMenuXStart");
    int stubYStart = GetUserCVar(playerN, "M8FWeaponMenuYStart");
    HudMessage(s:"Weapon Menu: \nUnrecognized weapon set.\nTo start Autodetection, type\nwmauto in console.";
               HUDMSG_PLAIN, messageIdStart, CR_RED, stubXStart, stubYStart, 0);
    return;
  }

  WM_SetupFont();

  int availableWeaponColor    = GetUserCVar(playerN, "M8FAvailableWeaponColor");
  int notAvailableWeaponColor = GetUserCVar(playerN, "M8FNotAvailableWeaponColor");
  int highlightedWeaponColor  = GetUserCVar(playerN, "M8FHighlightedWeaponColor");
  int selectedWeaponColor     = GetUserCVar(playerN, "M8FSelectedWeaponColor");

  bool showNotAvailable  = GetUserCVar(playerN, "M8FShowNotAvailable");
  bool highToLow         = GetUserCVar(playerN, "M8FWeaponMenuHighToLow");
  bool numbersOnTheLeft  = GetUserCVar(playerN, "M8FWeaponMenuNumbersLeft");
  bool showWeaponNames   = GetUserCVar(playerN, "M8fWeaponMenuShowNames");
  bool highlightSelected = GetUserCVar(playerN, "M8FWeaponMenuHighlightSelected");

  int xStart         = GetUserCVar(playerN, "M8FWeaponMenuXStart");
  int yStart         = GetUserCVar(playerN, "M8FWeaponMenuYStart");
  int stepMultiplier = GetUserCVar(playerN, "M8FWeaponMenuStepMultiplier");

  int stepMultiplied = (step * stepMultiplier) >> 16;
  int yStartMax = 1.0 - stepMultiplied * weaponCount;
  if (yStart > yStartMax) { yStart = yStartMax; }

  int position          = 0;
  int availablePosition = 0;
  int holdingPosition   = 0;

  for (int i = 0; i < weaponCount; ++i)
  {
    // remember position of selected weapon
    if (i == highlightedWeapon) { availablePosition = position; }
    if (i == selectedWeapon)    { holdingPosition   = position; }

    if (WM_IsInInventory(i))
    {
      bool mustShow = (i != highlightedWeapon) ||
        (i != selectedWeapon && highlightSelected);

      if (mustShow)
      {
        WM_PrintHudWeapon(i,
                          position,
                          availableWeaponColor,
                          xStart,
                          yStart,
                          highToLow,
                          numbersOnTheLeft,
                          stepMultiplied,
                          showWeaponNames
        );
      }
      position += 1;
    }
    else if (showNotAvailable && !WM_IsSecretWeapon(i))
    {
      WM_PrintHudWeapon(i,
                        position,
                        notAvailableWeaponColor,
                        xStart,
                        yStart,
                        highToLow,
                        numbersOnTheLeft,
                        stepMultiplied,
                        showWeaponNames
      );
      position += 1;
    }
  }

  if (WM_IsInInventory(highlightedWeapon))
  {
    WM_PrintHudWeapon(highlightedWeapon,
                      availablePosition,
                      highlightedWeaponColor,
                      xStart,
                      yStart,
                      highToLow,
                      numbersOnTheLeft,
                      stepMultiplied,
                      showWeaponNames
    );

    if (highlightSelected && WM_IsInInventory(selectedWeapon))
    {
      WM_PrintHudWeapon(selectedWeapon,
                        holdingPosition,
                        selectedWeaponColor,
                        xStart,
                        yStart,
                        highToLow,
                        numbersOnTheLeft,
                        stepMultiplied,
                        showWeaponNames
      );
    }
  }
}

function void WM_PrintHudWeapon(
  int weaponNumber,
  int position,
  int color,
  int xStart,
  int yStart,
  bool highToLow,
  bool numbersOnTheLeft,
  int stepMultiplied,
  bool showWeaponNames
)
{
  int id = messageIdStart + weaponNumber;

  int y = yStart;
  if (highToLow) { y += (weaponCount - 1 - position) * stepMultiplied; }
  else           { y += position * stepMultiplied; }

  int slotNumber = WM_GetWeaponSlot(weaponNumber);

  str weaponString;
  if (showWeaponNames)
  {
    str name = WM_GetPrintableWeaponName(weaponNumber);
    str delimiter  = " - ";

    if (numbersOnTheLeft)
    {
      weaponString = StrParam(s:" ", i:slotNumber, s:delimiter, s:name, s:" ");
    }
    else
    {
      weaponString = StrParam(s:" ", s:name, s:delimiter, i:slotNumber, s:" ");
    }
  }
  else
  {
    weaponString = StrParam(s:" ", i:slotNumber, s:" ");
  }

  HudMessage(s:weaponString; HUDMSG_PLAIN, id, color, xStart, y, 0);
}

function void WM_SetupFont(void)
{
  str fonts[3] = { "SMALLFONT", "CONFONT", "BIGFONT" };

  int playerN  = PlayerNumber();
  int iFont    = GetUserCVar(playerN, "M8fWeaponMenuFont");

  if (0 <= iFont && iFont < 3)
  {
    SetFont(fonts[iFont]);
  }
}


// Control functions section ///////////////////////////////////////////////////

function void WM_HighlightSelectedWeapon(void)
{
  for (int s = 0; s < weaponCount; ++s)
  {
    if (WM_IsSelected(s))
    {
      WM_SetHighlightedWeapon(s);
      return;
    }
  }
}

function int WM_FindRealSelectedWeapon(void)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    if (WM_IsSelected(i))
    {
      return i;
    }
  }

  return -1;
}

function void WM_SelectWeapon(int weaponNumber)
{
  if (weaponNumber == selectedWeapon) { return; }

  str  weaponName = WM_GetWeaponName(weaponNumber);
  bool success    = SetWeapon(weaponName);

  if (success)
  {
    WM_SetLastUsedWeapon(selectedWeapon);
    WM_SetSelectedWeapon(weaponNumber);
  }
  else
  {
    str printableWeaponName = WM_GetPrintableWeaponName(weaponNumber);
    HudMessage(s:printableWeaponName, s:": no ammo.";
               HUDMSG_PLAIN, messageIdStart + MAX_WEAPONS_NUMBER, CR_RED,
               0.5, 0.5, 1.0);
    WM_SetHighlightedWeapon(selectedWeapon);
  }
}

function void WM_InitApiCvars(void)
{
  int playerN     = PlayerNumber();

  SetUserCVar(playerN, "M8fWeaponMenuWeaponCount", weaponCount);
  SetUserCVar(playerN, "M8fWeaponMenuIsOpened", false);

  for (int i = 0; i < weaponCount; ++i) {
    str weaponClassVarName = StrParam(s:"M8fWeaponMenuWeaponClass", i:i);
    str weaponNameVarName  = StrParam(s:"M8fWeaponMenuWeaponName",  i:i);
    str weaponSlotVarName  = StrParam(s:"M8fWeaponMenuWeaponSlot",  i:i);

    SetUserCVarString(playerN, weaponClassVarName, WM_GetWeaponName(i));
    SetUserCVarString(playerN, weaponNameVarName,  WM_GetPrintableWeaponName(i));
    SetUserCVar      (playerN, weaponSlotVarName,  WM_GetWeaponSlot(i));
  }
}

function void WM_PlaySwitchSound(void)
{
  int playerN = PlayerNumber();
  bool soundIsEnabled = GetUserCVar(playerN, "M8fWeaponMenuEnableSound");

  if (soundIsEnabled)
  {
    str sound = GetUserCVarString(playerN, "M8fWeaponMenuHighlightSound");
    PlaySound(0, sound);
  }
}

function void WM_Initialize(void)
{
  weaponCount = weaponCounts[currentSet];
  step        = WM_IfThenElse((weaponCount < 20), 0.05, 0.02);

  WM_SetSelectedWeapon(WM_FindRealSelectedWeapon());
  WM_SetHighlightedWeapon(selectedWeapon);

  int playerN = PlayerNumber();
  int lastUsedWeaponLoaded = GetUserCVar(playerN, "M8fWeaponMenuLastUsedWeapon");
  if (lastUsedWeaponLoaded == -1 || !WM_IsInInventory(lastUsedWeaponLoaded))
  {
    WM_SetLastUsedWeapon(selectedWeapon);
  }
  else
  {
    WM_SetLastUsedWeapon(lastUsedWeaponLoaded);
  }

  WM_RenameWeaponsIfFreedoom();
  WM_UpdateIsInInventory();
  WM_InitApiCvars();
}

function bool WM_GetWeaponSet(void)
{
  int playerN      = PlayerNumber();
  str remClass     = GetUserCVarString(playerN, "M8fWeaponMenuRememberedClass");
  str currentClass = GetActorClass(0);

  if (StrICmp(currentClass, remClass) == 0)
  {
    Log(s:"Weapon menu: loading autodetected weapon set...");
    WM_LoadRemembered();
    return AUTO_SET;
  }

  for (int c = 0; c < SETS_NUMBER; ++c)
  {
    if (CheckActorClass(0, playerClassNames[c]))
    {
      return c;
    }
  }

  return -1;
}

function bool WM_IsTitlemap(void)
{
  str mapLumpName = StrParam(n:PRINTNAME_LEVEL);
  return (StrICmp(mapLumpName, "TITLEMAP") == 0);
}

function bool WM_MenuIsEnabled(int weaponSet)
{
  bool isEnabled = (weaponSet != -1);
  WM_SetCVar(menuIsEnabled, "M8fWeaponMenuIsEnabled");

  if (isEnabled)
  {
    WM_Initialize();
    Log(s:"Weapon menu is loaded.");
  }
  else
  {
    Log(s:"Weapon Menu: unknown player class: ",
        s:GetActorClass(0),
        s:", menu is disabled.\nYou can try 'wmauto' in console.");
  }

  return isEnabled;
}

function bool WM_IsFreeDoom(void)
{
  str checkString = StrParam(l:"CC_IMP");
  return (StrICmp(checkString, "serpentipede") == 0);
}

function void WM_RenameWeaponsIfFreedoom(void)
{
  if (!WM_IsFreedoom()) { return; }

  printableNames[0][0] = "Angle Grinder";
  printableNames[0][1] = "Fists";
  printableNames[0][2] = "Handgun";
  printableNames[0][3] = "Double-barrelled Shotgun";
  printableNames[0][4] = "Pump-action Shotgun";
  printableNames[0][5] = "Minigun";
  printableNames[0][6] = "Missile Launcher";
  printableNames[0][7] = "Polaric Energy Cannon";
  printableNames[0][8] = "SKAG 1337";
}

function bool WM_IsOpenOnScroll(void)
{
  int playerN = PlayerNumber();
  return GetUserCVar(playerN, "M8fWeaponMenuOpenOnScroll");
}


// Scripts section /////////////////////////////////////////////////////////////

script "ShowWeaponMenu" ENTER
{
  if (WM_IsTitlemap()) { terminate; }

  currentSet = WM_GetWeaponSet();
  menuIsEnabled = WM_MenuIsEnabled(currentSet);
  if (!menuIsEnabled) { terminate; }

  int updatePeriod = 10;
  int updateCount = 0;

  // options
  while (true)
  {
    // CVar may have been reset by other games while this game was saved.
    WM_SetCVar(menuIsEnabled, "M8fWeaponMenuIsEnabled");
    WM_SetMenuIsOpened(menuIsOpened);

    if (menuIsOpened)
    {
      if (updateCount < updatePeriod)
      {
        ++updateCount;
      }
      else
      {
        updateCount = 0;
        bool updated = WM_UpdateIsInInventory();
        if (updated) { WM_UpdateMenu(); }
      }
    }

    // debug output
    /*
    SetFont("SMALLFONT");
    Log(s:"sel:",   i:selectedWeapon,
        s:" high:", i:highlightedWeapon,
        s:" last:", i:lastUsedWeapon);
    //*/

    if (!WM_IsSelected(selectedWeapon))
    {
      str currentWeapon = GetWeapon();
      if (WM_IsListed(currentWeapon))
      {
        if (WM_IsInInventory(selectedWeapon))
        {
          WM_SetLastUsedWeapon(selectedWeapon);
        }
        WM_HighlightSelectedWeapon();
        WM_SetSelectedWeapon(highlightedWeapon);
      }

      WM_UpdateMenu();
    }

    Delay(1);
  }
}

script "ApplyWeaponMenuSettings" (void)
{
  WM_UpdateMenu();
}

script "ToggleWeaponMenu" (int highlightSelected)
{
  WM_ToggleWeaponMenu(highlightSelected);
}

function void WM_ToggleWeaponMenu(int highlightSelected)
{
  WM_SetMenuIsOpened(!menuIsOpened);

  if (menuIsOpened)
  {
    WM_UpdateIsInInventory();
    if (highlightSelected)
    {
      WM_HighlightSelectedWeapon();
    }
  }

  else // if closed: select highlighted weapon:
  {
    if (highlightedWeapon != selectedWeapon)
    {
      WM_SetLastUsedWeapon(selectedWeapon);
      WM_SelectWeapon(highlightedWeapon);
    }
  }

  WM_UpdateMenu();
}

script "ScrollNextWeapon" (void)
{
  int i;
  int stopper = weaponCount;

  if (WM_IsOpenOnScroll() && !menuIsOpened)
  {
    WM_ToggleWeaponMenu(true);
  }

  if (menuIsOpened)
  {
    i = highlightedWeapon;
    do
    {
      ++i;
      if (i >= weaponCount) { i = 0; }
      --stopper;
    }
    while (!WM_IsInInventory(i) && stopper);

    WM_SetHighlightedWeapon(i);
    if (stopper) { WM_PlaySwitchSound(); }
  }

  else
  {
    i = selectedWeapon;
    do
    {
      ++i;
      if (i >= weaponCount) { i = 0; }
      --stopper;
    }
    while (!SetWeapon(WM_GetWeaponName(i)) && stopper);

    if (i != selectedWeapon)
    {
      WM_SetLastUsedWeapon(selectedWeapon);
      WM_SetSelectedWeapon(i);
      WM_SetHighlightedWeapon(i);
    }
  }

  WM_UpdateMenu();
}

script "ScrollPreviousWeapon" (void)
{
  int i;
  int stopper = weaponCount;

  if (WM_IsOpenOnScroll() && !menuIsOpened)
  {
    WM_ToggleWeaponMenu(true);
  }

  if (menuIsOpened)
  {
    i = highlightedWeapon;
    do
    {
      --i;
      if (i < 0) { i = weaponCount - 1; }
      --stopper;
    }
    while (!WM_IsInInventory(i) && stopper);

    WM_SetHighlightedWeapon(i);
    if (stopper) { WM_PlaySwitchSound(); }
  }

  else
  {
    i = selectedWeapon;
    do
    {
      --i;
      if (i < 0) { i = weaponCount - 1; }
      --stopper;
    }
    while (!SetWeapon(WM_GetWeaponName(i)) && stopper);

    if (i != selectedWeapon)
    {
      WM_SetLastUsedWeapon(selectedWeapon);
      WM_SetSelectedWeapon(i);
      WM_SetHighlightedWeapon(i);
    }
  }

  int playerN = PlayerNumber();
  SetUserCVar(playerN, "M8fWeaponMenuHighlightedWeapon", highlightedWeapon);

  WM_UpdateMenu();
}

script "SmartWeaponSelection" (int slotNumber)
{
  if (slotNumber >= weaponCount) { terminate; }

  int currentSlot = WM_GetWeaponSlot(highlightedWeapon);
  bool sameSlot = (slotNumber == currentSlot);

  if (menuIsOpened)
  {
    if (sameSlot)
    {
      int sibling = highlightedWeapon;
      int stopper = weaponCount;
      do
      {
        sibling = WM_GetWeaponSibling(sibling);
        if (sibling == -1) break;
        --stopper;
      }
      while (!WM_IsInInventory(sibling) && stopper);

      if (sibling != -1 && sibling != highlightedWeapon)
      {
        WM_SetHighlightedWeapon(sibling);
        WM_PlaySwitchSound();
      }
    }
    else
    {
      WM_HighlightFirstInInventory(slotNumber);
    }
  }

  else
  {
    WM_ToggleWeaponMenu(true);
    WM_HighlightFirstInInventory(slotNumber);
  }

  WM_UpdateMenu();
}

script "SelectLastUsedWeapon" (void)
{
  if (WM_IsInInventory(lastUsedWeapon))
  {
    WM_SelectWeapon(lastUsedWeapon);
  }

  WM_UpdateMenu();
}

script "WM_MarkWeaponAsFavorite" (void)
{
  WM_SetCVar(selectedWeapon, "M8fWeaponMenuFavoriteWeapon");
  Log(s:WM_GetPrintableWeaponName(selectedWeapon), s:" is set as favorite weapon.");
}

script "WM_SelectFavoriteWeapon" (void)
{
  int playerN = PlayerNumber();
  int favorite = GetUserCVar(playerN, "M8fWeaponMenuFavoriteWeapon");
  if (WM_IsInInventory(favorite))
  {
    WM_SelectWeapon(favorite);
  }

  WM_UpdateMenu();
}


// Utility functions section ///////////////////////////////////////////////////

function bool WM_UpdateIsInInventory(void)
{
  bool updated = false;

  for (int i = 0; i < weaponCount; ++i)
  {
    bool old = isInInventory[i];
    isInInventory[i] = CheckInventory(WM_GetWeaponName(i));
    if (old != isInInventory[i]) { updated = true; }
  }

  return updated;
}

function bool WM_IsInInventory(int weaponNumber)
{
  return isInInventory[weaponNumber];
}

function bool WM_IsSelected(int weaponNumber)
{
  return CheckWeapon(WM_GetWeaponName(weaponNumber));
}

function void WM_HighlightFirstInInventory(int slotNumber)
{
  int weaponNumber = getWeaponBySlot(slotNumber);
  if (WM_IsInInventory(weaponNumber) && highlightedWeapon != weaponNumber)
  {
    WM_SetHighlightedWeapon(weaponNumber);
    WM_PlaySwitchSound();
  }
}

function bool WM_IsValidWeaponNumber(int weaponNumber)
{
  return (0 <= weaponNumber && weaponNumber < weaponCount);
}

function int WM_IfThenElse(bool condition, int trueValue, int falseValue)
{
  if (condition)
  {
    return trueValue;
  }

  return falseValue;
}

function bool WM_IsListed(str weaponName)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    if (StrICmp(weaponName, WM_GetWeaponName(i)) == 0)
    {
      return true;
    }
  }
  return false;
}

// Global variables write access functions /////////////////////////////////////

function void WM_SetCVar(int value, str cvarName)
{
  int playerN = PlayerNumber();
  SetUserCVar(playerN, cvarName, value);
}

function void WM_SetMenuIsOpened(bool opened)
{
  menuIsOpened = opened;
  WM_SetCVar(menuIsOpened, "M8fWeaponMenuIsOpened");
}

function void WM_SetHighlightedWeapon(int weaponNumber)
{
  highlightedWeapon = weaponNumber;
  WM_SetCVar(highlightedWeapon, "M8fWeaponMenuHighlightedWeapon");
}

function void WM_SetSelectedWeapon(int weaponNumber)
{
  selectedWeapon = weaponNumber;
  WM_SetCVar(selectedWeapon, "M8fWeaponMenuSelectedWeapon");
}

function void WM_SetLastUsedWeapon(int weaponNumber)
{
  lastUsedWeapon = weaponNumber;
  WM_SetCVar(lastUsedWeapon, "M8fWeaponMenuLastUsedWeapon");
}


// Autodetection section ///////////////////////////////////////////////////////

script "WM_RememberWeapon" (int slot)
{
  str currentWeapon = GetWeapon();

  if (StrCmp(currentWeapon, "WMWeaponStub") == 0) { terminate; }

  bool alreadyRemembered = false;
  for (int i = 0; i < weaponCounts[AUTO_SET]; ++i)
  {
    if (StrICmp(names[AUTO_SET][i], currentWeapon) == 0) // equal
    {
      alreadyRemembered = true;
      break;
    }
  }

  if (!alreadyRemembered && weaponCounts[AUTO_SET] < MAX_WEAPONS_NUMBER)
  {
    slots[AUTO_SET][weaponCounts[AUTO_SET]] = slot;
    names[AUTO_SET][weaponCounts[AUTO_SET]] = currentWeapon;
    printableNames[AUTO_SET][weaponCounts[AUTO_SET]] = currentWeapon;
    ++weaponCounts[AUTO_SET];
  }

  SetWeapon("WMWeaponStub");
  TakeInventory(currentWeapon, 1);
}

script "WM_Remember_Start" (void)
{
  weaponCounts[AUTO_SET] = 0;
  GiveInventory("WMInstaSwitcher", 1);
  GiveInventory("WMWeaponStub", 1);
}

script "WM_Remember_Fin" (void)
{
  // save all remembered info
  int playerN = PlayerNumber();
  int autoCount = weaponCounts[AUTO_SET];
  SetUserCVar(playerN, "M8fWeaponMenuRememberedCount", autoCount);
  SetUserCVarString(playerN, "M8fWeaponMenuRememberedClass", GetActorClass(0));

  for (int w = 0; w < autoCount; ++w)
  {
    str weaponClassVarName = StrParam(s:"M8fWeaponMenuRememberedName", i:w);
    str weaponSlotVarName  = StrParam(s:"M8fWeaponMenuRememberedSlot", i:w);

    SetUserCVarString(playerN, weaponClassVarName, names[AUTO_SET][w]);
    SetUserCVar      (playerN, weaponSlotVarName,  slots[AUTO_SET][w]);
  }

  Log(s:"weapon count: ", i:autoCount);

  Log(s:"slots: {");
  int i;
  for (i = 0; i < autoCount - 1; ++i)
  {
    Log(i:slots[AUTO_SET][i], s:", ");
  }
  Log(i:slots[AUTO_SET][i], s:" }");

  Log(s:"weapon classes: {");
  for (i = 0; i < autoCount - 1; ++i)
  {
    Log(s:names[AUTO_SET][i], s:", ");
  }
  Log(s:names[AUTO_SET][i], s:" }");

  // reset last used weapon
  WM_SetLastUsedWeapon(-1);
}

function void WM_LoadRemembered(void)
{
  int playerN = PlayerNumber();
  int autoCount = GetUserCVar(playerN, "M8fWeaponMenuRememberedCount");
  weaponCounts[AUTO_SET] = autoCount;

  for (int i = 0; i < autoCount; ++i)
  {
    str weaponClassVarName = StrParam(s:"M8fWeaponMenuRememberedName", i:i);
    str weaponSlotVarName  = StrParam(s:"M8fWeaponMenuRememberedSlot", i:i);

    names[AUTO_SET][i] = GetUserCVarString(playerN, weaponClassVarName);
    slots[AUTO_SET][i] = GetUserCVar      (playerN, weaponSlotVarName);
    printableNames[AUTO_SET][i] = WM_BeautifyWeaponName(names[AUTO_SET][i]);
  }
}

function str WM_BeautifyWeaponName(str weaponClassName)
{
  str result1 = WM_Replace(weaponClassName, '_', ' ');
  str result2 = WM_DivideCamelCase(result1);
  str result3 = WM_Capitalize(result2);
  return result3;
}

function str WM_Capitalize(str source)
{
  int firstChar = GetChar(source, 0);
  str result;
  if (WM_IsSmallLetter(firstChar))
  {
    int capitalized = firstChar - ('a' - 'A');
    int sourceLength = StrLen(source);
    result = StrParam(c:capitalized, s:StrRight(source, sourceLength - 1));
  }
  else
  {
    result = source;
  }
  return result;
}

function str WM_DivideCamelCase(str source)
{
  int sourceLength = StrLen(source);
  str result = "";
  str new;
  for (int i = 1; i < sourceLength; ++i)
  {
    int letter1 = GetChar(source, i-1);
    int letter2 = GetChar(source, i);
    if (WM_IsSmallLetter(letter1) && WM_IsBigLetter(letter2))
    {
      new = StrParam(s:result, c:letter1, s:" ");
      result = new;
    }
    else
    {
      new = StrParam(s:result, c:letter1);
      result = new;
    }
  }
  new = StrParam(s:result, s:StrRight(source, 1));
  result = new;

  return result;
}

function str WM_Replace(str source, int rem, int add)
{
  int sourceLength = StrLen(source);
  str result = "";
  str new;
  for (int i = 0; i < sourceLength; ++i)
  {
    int letter = GetChar(source, i);
    int replacement = WM_IfThenElse((letter == rem), add, letter);
    new = StrParam(s:result, c:replacement);
    result = new;
  }

  return result;
}

function bool WM_IsSmallLetter(int character)
{
  return ('a' <= character && character <= 'z');
}

function bool WM_IsBigLetter(int character)
{
  return ('A' <= character && character <= 'Z');
}

// Weapon Priority Section /////////////////////////////////////////////////////

script "WM_IncreasePriority" (void)
{
  str name = WM_GetPrintableWeaponName(highlightedWeapon);
  if (highlightedWeapon == 0)
  {
    Log(s:"Priority of ", s:name, s:" is already maximal.");
    terminate;
  }

  int oldMajorWeapon = highlightedWeapon - 1;
  int thisWeaponSlot = WM_GetWeaponSlot(highlightedWeapon);
  int oldWeaponSlot  = WM_GetWeaponSlot(oldMajorWeapon);
  if (thisWeaponSlot != oldWeaponSlot)
  {
    Log(s:"Priority of ", s:name, s:" is already maximal.");
    terminate;
  }

  WM_SwapWeapons(highlightedWeapon, oldMajorWeapon);
  WM_SetHighlightedWeapon(oldMajorWeapon);
  Log(s:"Priority of ", s:name, s:" is increased.");
  WM_UpdateMenu();
}

function void WM_SwapWeapons(int w1, int w2)
{
  if (w1 == w2) { return; }

  int namesTmp = names[currentSet][w1];
  names[currentSet][w1] = names[currentSet][w2];
  names[currentSet][w2] = namesTmp;

  int playerN = PlayerNumber();
  str weaponClassVarName1 = StrParam(s:"M8fWeaponMenuWeaponClass", i:w1);
  str weaponClassVarName2 = StrParam(s:"M8fWeaponMenuWeaponClass", i:w2);
  SetUserCVarString(playerN, weaponClassVarName1, WM_GetWeaponName(w1));
  SetUserCVarString(playerN, weaponClassVarName2, WM_GetWeaponName(w2));

  int printableNamesTmp = printableNames[currentSet][w1];
  printableNames[currentSet][w1] = printableNames[currentSet][w2];
  printableNames[currentSet][w2] = printableNamesTmp;

  str weaponNameVarName1 = StrParam(s:"M8fWeaponMenuWeaponName", i:w1);
  str weaponNameVarName2 = StrParam(s:"M8fWeaponMenuWeaponName", i:w2);
  SetUserCVarString(playerN, weaponNameVarName1, WM_GetPrintableWeaponName(w1));
  SetUserCVarString(playerN, weaponNameVarName2, WM_GetPrintableWeaponName(w2));

  int slotTmp = slots[currentSet][w1];
  slots[currentSet][w1] = slots[currentSet][w2];
  slots[currentSet][w2] = slotTmp;

  str slotVarName1 = StrParam(s:"M8fWeaponMenuWeaponSlot", i:w1);
  str slotVarName2 = StrParam(s:"M8fWeaponMenuWeaponSlot", i:w2);
  SetUserCVar(playerN, slotVarName1, WM_GetWeaponSlot(w1));
  SetUserCVar(playerN, slotVarName2, WM_GetWeaponSlot(w2));
}

script "WM_IncreaseSlot" (void)
{
  int currentSlot = WM_GetWeaponSlot(highlightedWeapon);
  if (currentSlot == 0) { terminate; }

  int targetSlot = currentSlot + 1;
  if (targetSlot == 10) { targetSlot = 0; }

  int i = weaponCount - 1;
  for (; i >= 0; --i)
  {
    if (WM_GetWeaponSlot(i) == currentSlot) { break; }
  }

  slots[currentSet][highlightedWeapon] = targetSlot;
  str name = WM_GetPrintableWeaponName(highlightedWeapon);
  WM_SwapWeapons(highlightedWeapon, i);
  WM_SetHighlightedWeapon(i);
  Log(s:"Slot of ", s:name, s:" is changed to ", i:targetSlot, s:".");
  WM_UpdateMenu();
}

script "WM_DecreaseSlot" (void)
{
  int currentSlot = WM_GetWeaponSlot(highlightedWeapon);
  if (currentSlot == 1) { terminate; }

  int targetSlot = currentSlot - 1;
  if (targetSlot == -1) { targetSlot = 9; }

  int i = 0;
  for (; i < weaponCount; ++i)
  {
    if (WM_GetWeaponSlot(i) == currentSlot) { break; }
  }

  slots[currentSet][highlightedWeapon] = targetSlot;
  str name = WM_GetPrintableWeaponName(highlightedWeapon);
  WM_SwapWeapons(highlightedWeapon, i);
  WM_SetHighlightedWeapon(i);
  Log(s:"Slot of ", s:name, s:" is changed to ", i:targetSlot, s:".");
  WM_UpdateMenu();
}
