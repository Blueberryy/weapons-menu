#library "LIBWEAPONMENU"
#include "zcommon.acs"

#define MINIMAL_HOLD_TIME (1873)
#define messageIdStart (191919)

// Known weapon sets:
// 0 - Vanilla (Standard) Weapons
// 1 - PerK's Smoother Weapon Animations Enhanced
// 2 - Eriguns1 Standard
// 3 - Eriguns1 Extended
// 4 - Eriguns2
// 5 - Beautiful Doom
#define SETS_NUMBER (12)
#define MAX_WEAPONS_NUMBER (50)

str playerClassNames[SETS_NUMBER] = {
  "DoomPlayer",
  "PerkDPlayer",
  "EriPlayer",
  "AltPlayer",
  "HellPlayer",
  "BD_DoomPlayer",
  "FDPlutPlayer",
  "FDTNTPlayer",
  "FDDoom2Player",
  "FDAliensPlayer",
  "FDJPCPPlayer",
  "FDBTSXPlayer",
};

int weaponCounts[SETS_NUMBER] = {
  // Standard
  9,

  // PerK's Smoother Weapon Animations Enhanced
  9,

  // Eriguns
  9,
  13,
  13,

  // Beautiful Doom
  9,

  // Final Doomer
  9,
  9,
  9,
  9,
  8,
  9,
};

int slots[SETS_NUMBER][MAX_WEAPONS_NUMBER] = {
  // Standard
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },

  // PerK's Smoother Weapon Animations Enhanced
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },

  // Eriguns
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 8 },
  { 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9 },

  // Beautiful Doom
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },

  // Final Doomer
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
};

str names[SETS_NUMBER][MAX_WEAPONS_NUMBER] = {
  { "Chainsaw", "Fist", "Pistol", "SuperShotgun", "Shotgun", "Chaingun", "RocketLauncher", "PlasmaRifle", "BFG9000" },
  { "Z86Chainsaw", "PerkFist", "PerkPistol", "PerkSuperShotgun", "PerkShotgun", "Z86Chaingun", "PerkRocketLauncher", "BloxPlasmaRifle", "Z86BFG9000" },

  { "EriChainsaw", "EriFist", "EriPistol", "EriSuperShotgun", "EriShotgun", "EriMachinegun", "EriRocketLauncher", "EriPlasmaRifle", "EriBFG9000" },
  { "EriChainsaw", "EriFist", "AltPistol", "EriAutoShotgun", "AltSuperShotgun", "EriShotgun", "EriGatlingGun", "EriMachinegun", "EriMissileLauncher", "EriRocketLauncher", "EriPlasmaRifle", "EriBFG9000", "EriGrenadeLauncher" },
  { "EriBlade", "EriFist", "EriSuperImmolator", "EriImmolator", "EriBloodbane", "EriNailgun", "EriMauler", "EriHellforge", "EriIrebolt", "EriCaster", "EriHydra", "EriBasilisk", "EriSoulreaver" },

  { "BD_Chainsaw", "BD_Fist", "BD_Pistol", "BD_SuperShotgun", "BD_Shotgun", "BD_Chaingun", "BD_RocketLauncher", "BD_PlasmaRifle", "BD_BFG9000" },

  { "FDPlutChainsaw", "FDPlutFist", "FDPlutPistol", "FDPlutSuperShotgun", "FDPlutShotgun", "FDPlutChaingun", "FDPlutRocketLauncher", "FDPlutPlasmaRifle", "FDPlutBFG9000" },
  { "FDTNTChainsaw", "FDTNTFist", "FDTNTPistol", "FDTNTSuperShotgun", "FDTNTShotgun", "FDTNTChaingun", "FDTNTRocketLauncher", "FDTNTPlasmaRifle", "FDTNTBFG9000" },
  { "FDDoom2Chainsaw", "FDDoom2Fist", "FDDoom2Pistol", "FDDoom2SuperShotgun", "FDDoom2Shotgun", "FDDoom2Chaingun", "FDDoom2RocketLauncher", "FDDoom2PlasmaRifle", "FDDoom2BFG9000" },
  { "FDAliensChainsaw", "FDAliensFist", "FDAliensPistol", "FDAliensSuperShotgun", "FDAliensShotgun", "FDAliensChaingun", "FDAliensRocketLauncher", "FDAliensPlasmaRifle", "FDAliensBFG9000" },
  { "FDJPCPFist", "FDJPCPPistol", "FDJPCPSuperShotgun", "FDJPCPShotgun", "FDJPCPChaingun", "FDJPCPRocketLauncher", "FDJPCPPlasmaRifle", "FDJPCPBFG9000" },
  { "FDBTSXChainsaw", "FDBTSXFist", "FDBTSXPistol", "FDBTSXSuperShotgun", "FDBTSXShotgun", "FDBTSXChaingun", "FDBTSXRocketLauncher", "FDBTSXPlasmaRifle", "FDBTSXBFG9000" },
};

str printableNames[SETS_NUMBER][MAX_WEAPONS_NUMBER] = {
  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000" },
  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000" },
  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000" },
  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Auto Shotgun", "3. Super Shotgun", "3. Shotgun", "4. Gatling Gun", "4. Machinegun", "5. Missile Launcher", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000", "8. Grenade Launcher" },
  { "1. Vorpal Blade", "1. Fist", "2. Super Immolator", "2. Immolator", "3. Bloodbane", "4. Nailgun", "5. Mauler", "6. Hellforge", "6. Irebolt", "7. Soul Caster", "8. Hydra", "8. Basilisk", "9. Soul Reaver" },
  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000" },
  { "1. Power Saw", "1. Melee", "2. Ol' Faithful", "3. Super Shotgun", "3. Scoped Shotgun", "4. Machine Gun", "5. Grenade Launcher", "6. Heavy Machine Gun", "7. Quantum Accelerator" },
  { "1. Halderman Device", "1. Melee", "2. Prototype Pistol", "3. Burst Shotgun", "3. Tactical Shotgun", "4. Dual Uzis", "5. Missile Launcher", "6. Maser", "7. Incursion Annihilator" },
  { "1. Chainsaw", "1. Melee", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG 9000" },
  { "1. Stasis Bow", "1. Trench Knife", "2. Ancient Pistol", "3. Hybrid SSG", "3. Ancient Shotgun", "4. Ancient AK", "5. Photon Scepter", "6. Alien Elite Weapon", "7. Illuminator" },
  { "1. Katana", "2. Silenced Pistol", "3. Neutron Cascader", "3. Neutron Pulser", "4. Burst Needler", "5. Prism Cannon", "6. Ofuda Caster", "7. Onmyou Devastator" },
  { "1. NanoCore", "1. Power Fist", "2. Charge Pistol", "3. Machreaper", "3. Arc Blaster", "4. Pulse Rifle", "5. Pulse Cannon", "6. Plasma Vulcan", "7. X-Spark Cannon" },
};

bool menuIsOpened   = false;
int  selectedWeapon = 0;
int  currentSet     = -1;

function int getWeaponSlot(int weaponNumber)
{
  if (0 <= weaponNumber && weaponNumber < weaponCounts[currentSet])
  {
    return slots[currentSet][weaponNumber];
  }

  return 0;
}

function str getWeaponName(int weaponNumber)
{
  if (0 <= weaponNumber && weaponNumber < weaponCounts[currentSet])
  {
    return names[currentSet][weaponNumber];
  }

  return "UnknownWeapon";
}

function str getPrintableWeaponName(int weaponNumber)
{
  if (0 <= weaponNumber && weaponNumber < weaponCounts[currentSet])
  {
    return printableNames[currentSet][weaponNumber];
  }

  return "Unknown weapon";
}

// Returns weaponNumber of next weapon in this slot, or -1 if there is no
function int getWeaponSibling(int weaponNumber)
{
  int thisWeaponSlot = getWeaponSlot(weaponNumber);
  int weaponCount    = weaponCounts[currentSet];

  for (int i = 0; i < weaponCount; ++i)
  {
    int w = (weaponNumber + i) % weaponCount;
    if (w != weaponNumber && getWeaponSlot(w) == thisWeaponSlot)
    {
      return w;
    }
  }

  return -1;
}

function int getWeaponBySlot(int slotNumber)
{
  int weaponCount = weaponCounts[currentSet];

  for (int i = 0; i < weaponCount; ++i)
  {
    if (slotNumber == getWeaponSlot(i) && CheckInventory(GetWeaponName(i)))
    {
      return i;
    }
  }

  return -1;
}

function void printHudWeapon(int weaponNumber, int color)
{
  int id = messageIdStart + weaponNumber;
  int x  = 0;
  int step = 0.05;
  int y  = (weaponCounts[currentSet] - 1 - weaponNumber) * step;
  HudMessage(s:getPrintableWeaponName(weaponNumber); HUDMSG_PLAIN, id, color, x, y, MINIMAL_HOLD_TIME);
}

function void SetSelected(void)
{
  int weaponCount = weaponCounts[currentSet];

  for (int s = 0; s < weaponCount; ++s)
  {
    if (checkWeapon(GetWeaponName(s)))
    {
      selectedWeapon = s;
      break;
    }
  }
}

script "ShowWeaponMenu" ENTER
{
  // check if player class is known
  for (int c = 0; c < SETS_NUMBER; ++c)
  {
    if (CheckActorClass(0, playerClassNames[c]))
    {
      currentSet = c;
      break;
    }
  }
  bool menuEnabled = (currentSet != -1);

  if (!menuEnabled)
  {
    log(s:"Weapon Menu: unknown player class: ", s:GetActorClass(0), s:", menu is disabled.");
  }

  int weaponCount = weaponCounts[currentSet];

  if (menuEnabled)
  {
    SetSelected();
  }

  while (menuEnabled)
  {
    if (menuIsOpened)
    {
      // can happen if player drops weapon, or pistol starter script is in action
      if (!CheckInventory(GetWeaponName(selectedWeapon)))
      {
        SetSelected();
      }

      for (int i = 0; i < weaponCount; ++i)
      {
        if (CheckInventory(GetWeaponName(i)))
        {
          printHudWeapon(i, CR_BLUE);
        }
        else
        {
          printHudWeapon(i, CR_GRAY);
        }
      }

      printHudWeapon(selectedWeapon, CR_CYAN);

    }

    Delay(1);
  }
}

script "ToggleWeaponMenu" (void)
{
  ToggleWeaponMenuFunction();
}

function void ToggleWeaponMenuFunction(void)
{
  menuIsOpened = !menuIsOpened;

  // on close - select weapon in menu.
  if (!menuIsOpened)
  {
    SetWeaponByNumber(selectedWeapon);
  }
}

script "ScrollNextWeapon" (void)
{
  int weaponCount = weaponCounts[currentSet];

  do
  {
    selectedWeapon += 1;
    if (selectedWeapon >= weaponCount)
    {
      selectedWeapon = 0;
    }
  }
  while (!CheckInventory(GetWeaponName(selectedWeapon)));

  if (!menuIsOpened)
  {
    SetWeaponByNumber(selectedWeapon);
  }
}

script "ScrollPreviousWeapon" (void)
{
  int weaponCount = weaponCounts[currentSet];

  do
  {
    selectedWeapon -= 1;
    if (selectedWeapon < 0)
    {
      selectedWeapon = weaponCount;
    }
  }
  while (!CheckInventory(GetWeaponName(selectedWeapon)));

  if (!menuIsOpened)
  {
    SetWeaponByNumber(selectedWeapon);
  }
}

function void SetWeaponByNumber(int weaponNumber)
{
  SetWeapon(GetWeaponName(weaponNumber));
}

function void SetSelectedIfAvailable(int newSelected)
{
  if (CheckInventory(GetWeaponName(newSelected)))
  {
    selectedWeapon = newSelected;
  }
}

script "SmartWeaponSelection" (int slotNumber)
{
  if (slotNumber < weaponCounts[currentSet])
  {

    if (!menuIsOpened)
    {
      SetSelectedIfAvailable(getWeaponBySlot(slotNumber));
      ToggleWeaponMenuFunction(); // open menu
    }
    else
    {
      int currentSlot = getWeaponSlot(selectedWeapon);
      bool sameSlot = (slotNumber == currentSlot);

      if (sameSlot)
      {
        int sibling = getWeaponSibling(selectedWeapon);
        if (sibling != -1)
        {
          SetSelectedIfAvailable(sibling);
        }
      }
      else
      {
        SetSelectedIfAvailable(getWeaponBySlot(slotNumber));
      }
    }

  }
}
