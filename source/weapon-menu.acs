#library "LIBWEAPONMENU"
#include "zcommon.acs"

#define MINIMAL_HOLD_TIME (1873)
#define messageIdStart (191919)

// Known weapon sets:
// 0 - Vanilla (Standard) Weapons
// 1 - PerK's Smoother Weapon Animations Enhanced
// 2 - Eriguns1 Standard
// 3 - Eriguns1 Extended
// 4 - Eriguns2
// 5 - Beautiful Doom
// 6 - Final Doomer - Plutonia
// 7 - Final Doomer - TNT
// 8 - Final Doomer - Doom 2
// 9 - Final Doomer - Ancient Aliens
// 10 - Final Doomer - JPCP
// 11 - Final Doomer - BTSX
// 12 - Faspons
// 13 - HXRTC Project
// 14 - Kriegsland
// 15 - Complex Doom V27a3
// 16 - Weapons of Saturn - October 31, 2017

#define SETS_NUMBER (17)
#define MAX_WEAPONS_NUMBER (50)

str playerClassNames[SETS_NUMBER] = {
  "DoomPlayer",        // Standard
  "PerkDPlayer",       // PerK's Smoother Weapon Animations Enhanced
  "EriPlayer", "AltPlayer", "HellPlayer", // Eriguns
  "BD_DoomPlayer",     // Beautiful Doom
  "FDPlutPlayer", "FDTNTPlayer", "FDDoom2Player", "FDAliensPlayer", "FDJPCPPlayer", "FDBTSXPlayer", // Final Doomer
  "FasPlayer",         // Faspons
  "HXRTCPlayer",       // HXRTC Project
  "FKPlayer",          // Kriegsland
  "ComplexDoomPlayer", // Complex Doom
  "SaturnPlayer",      // Weapons of Saturn
};

int weaponCounts[SETS_NUMBER] = {
  9,  // Standard
  9,  // PerK's Smoother Weapon Animations Enhanced
  9, 13, 13, // Eriguns
  9,  // Beautiful Doom
  9, 9, 9, 9, 8, 9, // Final Doomer: Plutonia, TNT, Doom2, AA, JPCP, BTSX
  9,  // Faspons
  50, // HXRTC Project!
  22 + 5, // Kriegsland
  20, // Complex Doom
  11, // Weapons of Saturn
};

int slots[SETS_NUMBER][MAX_WEAPONS_NUMBER] = {
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Standard

  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // PerK's Smoother Weapon Animations Enhanced

  // Eriguns
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 8 },
  { 1, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9 },

  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Beautiful Doom

  // Final Doomer
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 2, 3, 3, 4, 5, 6, 7 },
  { 1, 1, 2, 3, 3, 4, 5, 6, 7 },

  { 1, 1, 2, 3, 3, 4, 5, 6, 7 }, // Faspons

  { // HXRTC Project
    1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5,
    6, 6, 6, 6, 6,
    7, 7, 7, 7, 7,
    8, 8, 8, 8, 8,
    9, 9, 9, 9, 9,
    0, 0
  },

  { // Kriegsland
    1, 1, 1,
    2, 2, 2,
    3, 3,
    4, 4,
    5, 5, 5,
    6, 6, 6,
    7, 7, 7,
    8, 8, 8,
    9, 9, 9, 9, 9, // cross akimbos
  },

  { // Complex Doom
    1, 1, 1, 1,
    2,
    3, 3, 3, 3,
    4, 4,
    5, 5,
    6, 6, 6,
    7, 7, 7,
    8,
  },

  { 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7 }, // Weapons of Saturn
};

str names[SETS_NUMBER][MAX_WEAPONS_NUMBER] = {
  { "Chainsaw", "Fist", "Pistol", "SuperShotgun", "Shotgun", "Chaingun", "RocketLauncher", "PlasmaRifle", "BFG9000" },
  { "Z86Chainsaw", "PerkFist", "PerkPistol", "PerkSuperShotgun", "PerkShotgun", "Z86Chaingun", "PerkRocketLauncher", "BloxPlasmaRifle", "Z86BFG9000" },

  { "EriChainsaw", "EriFist", "EriPistol", "EriSuperShotgun", "EriShotgun", "EriMachinegun", "EriRocketLauncher", "EriPlasmaRifle", "EriBFG9000" },
  { "EriChainsaw", "EriFist", "AltPistol", "EriAutoShotgun", "AltSuperShotgun", "EriShotgun", "EriGatlingGun", "EriMachinegun", "EriMissileLauncher", "EriRocketLauncher", "EriPlasmaRifle", "EriBFG9000", "EriGrenadeLauncher" },
  { "EriBlade", "EriFist", "EriSuperImmolator", "EriImmolator", "EriBloodbane", "EriNailgun", "EriMauler", "EriHellforge", "EriIrebolt", "EriCaster", "EriHydra", "EriBasilisk", "EriSoulreaver" },

  { "BD_Chainsaw", "BD_Fist", "BD_Pistol", "BD_SuperShotgun", "BD_Shotgun", "BD_Chaingun", "BD_RocketLauncher", "BD_PlasmaRifle", "BD_BFG9000" },

  { "FDPlutChainsaw", "FDPlutFist", "FDPlutPistol", "FDPlutSuperShotgun", "FDPlutShotgun", "FDPlutChaingun", "FDPlutRocketLauncher", "FDPlutPlasmaRifle", "FDPlutBFG9000" },
  { "FDTNTChainsaw", "FDTNTFist", "FDTNTPistol", "FDTNTSuperShotgun", "FDTNTShotgun", "FDTNTChaingun", "FDTNTRocketLauncher", "FDTNTPlasmaRifle", "FDTNTBFG9000" },
  { "FDDoom2Chainsaw", "FDDoom2Fist", "FDDoom2Pistol", "FDDoom2SuperShotgun", "FDDoom2Shotgun", "FDDoom2Chaingun", "FDDoom2RocketLauncher", "FDDoom2PlasmaRifle", "FDDoom2BFG9000" },
  { "FDAliensChainsaw", "FDAliensFist", "FDAliensPistol", "FDAliensSuperShotgun", "FDAliensShotgun", "FDAliensChaingun", "FDAliensRocketLauncher", "FDAliensPlasmaRifle", "FDAliensBFG9000" },
  { "FDJPCPFist", "FDJPCPPistol", "FDJPCPSuperShotgun", "FDJPCPShotgun", "FDJPCPChaingun", "FDJPCPRocketLauncher", "FDJPCPPlasmaRifle", "FDJPCPBFG9000" },
  { "FDBTSXChainsaw", "FDBTSXFist", "FDBTSXPistol", "FDBTSXSuperShotgun", "FDBTSXShotgun", "FDBTSXChaingun", "FDBTSXRocketLauncher", "FDBTSXPlasmaRifle", "FDBTSXBFG9000" },

  { "Motorsaw", "Knuckles", "CombatRifle", "DoubleBarrel", "Riotgun", "Minigun", "RPG", "PulseRifle", "BFG" },

  {
    "Z-Gun", "DoomChainsaw", "Axe", "Knife", "DoubleKnuckles", "OmicronRaygun",
    "LightMachinegun", "MP40", "DualColt1911", "Colt1911", "DualBerettas", "Beretta",
    "W-Shotgun", "AutoShotgun", "QuadShotgun", "CoachGun", "RiotShotgun",
    "HeavyChaingun", "M134Minigun", "DemonkillerCarbine", "M24SniperRifle", "DualCombatRifles", "CombatRifle",
    "MultiElementalCannon", "CryogenicRepeater", "NapalmLauncher", "SawThrower", "Saturn-V",
    "GatlingLasergun", "DualPulseRifles", "PulseRifle", "DualPlasmaZappers", "PlasmaZapper",
    "BlackHoleMaker", "BFG-X", "RailgunV20", "NeedleBuster", "ProtoBlaster",
    "ChillyIceBombard", "FlameCannon", "ChillerCrossbow", "NightmareDoubleRaygun", "HellMissileLauncher",
    "AcidArbalest", "ToxicWand", "EvilWarriorShield", "UACChemicalSpray", "BlowGun",
    "LandMineWeapon", "HandGrenadeWeapon",
  },

  { // Kriegsland
    "HDGrenades", "HDChainsaw", "HDKnife",
    "HDBlaster", "HDHandgun", "HDPistol",
    "HDSuperShotgun", "HDShotgun",
    "HDChaingun", "HDMachinegun",
    "HDPanzerfaust", "HDFlareGun", "HDRocketLauncher",
    "HDSonicGun", "HDLightningGun", "HDPlasmaRifle",
    "HDLaserGun", "HDLurdinha", "HDBFG9000",
    "HDCarbine", "HDGewehr", "HDRifle",
    "HDCrossAkimbo5", "HDCrossAkimbo4", "HDCrossAkimbo3", "HDCrossAkimbo2", "HDCrossAkimbo1",
  },

  // Complex Doom
  {
    "Land Mine", "Hand Grenade", "Chainsaw ", "Melee",
    "Handgun",
    "Quad Barrel Shotgun", "Double Barrel Shotgun", "Assault Shotgun", "Combat Shotgun",
    "Minigun ", "Assault Rifle",
    "Grenade Launcher", "Rocket Launcher",
    "Railgun ", "Demon Tech Rifle", "Plasma Rifle",
    "Demon Tech BFG10K", "BFG10K ", "BFG9500",
    "MP40",
  },

  // Weapons of Saturn
  {
    "Motorsaw", "Knuckles",
    "1911", "Beretta",
    "Coachgun", "Riotgun",
    "Minigun", "MachineRifle",
    "SaturnV",
    "NovaRifle",
    "TITAN",
  },
};

str printableNames[SETS_NUMBER][MAX_WEAPONS_NUMBER] = {
  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000" },
  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000" },

  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000" },
  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Auto Shotgun", "3. Super Shotgun", "3. Shotgun", "4. Gatling Gun", "4. Machinegun", "5. Missile Launcher", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000", "8. Grenade Launcher" },
  { "1. Vorpal Blade", "1. Fist", "2. Super Immolator", "2. Immolator", "3. Bloodbane", "4. Nailgun", "5. Mauler", "6. Hellforge", "6. Irebolt", "7. Soul Caster", "8. Hydra", "8. Basilisk", "9. Soul Reaver" },

  { "1. Chainsaw", "1. Fist", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG9000" },

  { "1. Power Saw", "1. Melee", "2. Ol' Faithful", "3. Super Shotgun", "3. Scoped Shotgun", "4. Machine Gun", "5. Grenade Launcher", "6. Heavy Machine Gun", "7. Quantum Accelerator" },
  { "1. Halderman Device", "1. Melee", "2. Prototype Pistol", "3. Burst Shotgun", "3. Tactical Shotgun", "4. Dual Uzis", "5. Missile Launcher", "6. Maser", "7. Incursion Annihilator" },
  { "1. Chainsaw", "1. Melee", "2. Pistol", "3. Super Shotgun", "3. Shotgun", "4. Chaingun", "5. Rocket Launcher", "6. Plasma Rifle", "7. BFG 9000" },
  { "1. Stasis Bow", "1. Trench Knife", "2. Ancient Pistol", "3. Hybrid SSG", "3. Ancient Shotgun", "4. Ancient AK", "5. Photon Scepter", "6. Alien Elite Weapon", "7. Illuminator" },
  { "1. Katana", "2. Silenced Pistol", "3. Neutron Cascader", "3. Neutron Pulser", "4. Burst Needler", "5. Prism Cannon", "6. Ofuda Caster", "7. Onmyou Devastator" },
  { "1. NanoCore", "1. Power Fist", "2. Charge Pistol", "3. Machreaper", "3. Arc Blaster", "4. Pulse Rifle", "5. Pulse Cannon", "6. Plasma Vulcan", "7. X-Spark Cannon" },

  { "1. Chainsaw", "1. Knuckles", "2. Combat Rifle", "3. Double Barrel Shotgun", "3. Riotgun", "4. Minigun", "5. RPG", "6. Pulse Rifle", "7. BFG9000" },

  {
    "1. Z-Gun", "1. Chainsaw", "1. Hatchet", "1. Knife", "1. Double Knuckles", "1. Omicron Raygun",
    "2. Light Machinegun", "2. MP40", "2. Dual Colt 1911", "2. Colt 1911", "2. Dual Berettas", "2. Beretta",
    "3. W-Shotgun", "3. Auto Shotgun", "3. Quad Shotgun", "3. Coach Gun", "3. Riot Shotgun",
    "4. Heavy Chaingun", "4. M134 Minigun", "4. Demonkiller Carbine", "4. M24 Sniper Rifle", "4. Dual Combat Rifles", "4. Combat Rifle",
    "5. Multi-Elemental Cannon", "5. Cryogenic Repeater", "5. Napalm Launcher", "5. Saw Thrower", "5. Saturn-V",
    "6. Gatling Lasergun", "6. Dual Pulse Rifles", "6. Pulse Rifle", "6. Dual Plasma Zappers", "6. Plasma Zapper",
    "7. Black Hole Maker", "7. BFG-X", "7. Railgun 2.0", "7. Needle Buster", "7. Proto Blaster",
    "8. Chilly Mancubus' Ice Bombard", "8. Mancubi's Flame Cannon", "8. Arctic Archer's Chiller Crossbow", "8. Nightmare Reaper's Double Raygun", "8. Skeleton's Hell Missile Launcher",
    "9. Acid Arbalest", "9. Toxic Wand", "9. Evil Warrior's Shield", "9. UAC Chemical Spray", "9. Poison Dart Blowgun",
    "0. Land Mine", "0. Hand Grenade",
  },

  { // Kriegsland
    "1. Stielhandgranate-68", "1. Elektroshocker", "1. Kampfmesser 84",
    "2. DL-44 FuturPistole-Blaster", "2. Mauser M972-S2", "2. Luger P-58",
    "3. Jadtfaust Wunderfilnte-8", "3. Luftwaffe DP-65",
    "4. MP-86s", "4. StG-60",
    "5. Panzerkreuz Mk. III", "5. Kampfpistole", "5. Lawine-6",
    "6. Schallkraftwerk", "6. Blitzgewehr", "6. Flammenfaust",
    "7. Ekelhaftwaffe", "7. MG-92", "7. VFR-245 Puls-Kanone",
    "8. Bombenschuss", "8. Gewehr-1953", "8. KAR 82a-2K",
    "9. Cross Thermals", "9. Cross Launchers", "9. Cross Machineguns", "9. Cross Shotguns", "9. Cross Pistols",
  },

  // Complex Doom
  {
    "1. Land Mine", "1. Hand Grenade", "1. Chainsaw", "1. Melee",
    "2. Handgun",
    "3. Quad Barrel Shotgun", "3. Double Barrel Shotgun", "3. Assault Shotgun", "3. Combat Shotgun",
    "4. Minigun", "4. Assault Rifle",
    "5. Grenade Launcher", "5. Rocket Launcher",
    "6. Railgun", "6. Demon Tech Rifle", "6. Plasma Rifle",
    "7. Demon Tech BFG10K", "7. BFG10K", "7. BFG9500",
    "8. MP40",
  },

  // Weapons of Saturn
  {
    "1. Chain Saw", "1. Knuckles",
    "2. 1911", "2. Beretta",
    "3. Coach Gun", "3. Riot Gun",
    "4. Rotary Cannon", "4. Machine Rifle",
    "5. Saturn V",
    "6. Nova Rifle",
    "7. Titan",
  },
};

bool menuIsOpened   = false;
int  selectedWeapon = 0;
int  currentSet     = -1;

function int getWeaponSlot(int weaponNumber)
{
  if (0 <= weaponNumber && weaponNumber < weaponCounts[currentSet])
  {
    return slots[currentSet][weaponNumber];
  }

  return 0;
}

function str getWeaponName(int weaponNumber)
{
  if (0 <= weaponNumber && weaponNumber < weaponCounts[currentSet])
  {
    return names[currentSet][weaponNumber];
  }

  return "UnknownWeapon";
}

function str getPrintableWeaponName(int weaponNumber)
{
  if (0 <= weaponNumber && weaponNumber < weaponCounts[currentSet])
  {
    return printableNames[currentSet][weaponNumber];
  }

  return "Unknown weapon";
}

// Returns weaponNumber of next weapon in this slot, or -1 if there is no
function int getWeaponSibling(int weaponNumber)
{
  int thisWeaponSlot = getWeaponSlot(weaponNumber);
  int weaponCount    = weaponCounts[currentSet];

  for (int i = 0; i < weaponCount; ++i)
  {
    int w = (weaponNumber + i) % weaponCount;
    if (w != weaponNumber && getWeaponSlot(w) == thisWeaponSlot)
    {
      return w;
    }
  }

  return -1;
}

function int getWeaponBySlot(int slotNumber)
{
  int weaponCount = weaponCounts[currentSet];

  for (int i = 0; i < weaponCount; ++i)
  {
    if (slotNumber == getWeaponSlot(i) && CheckInventory(GetWeaponName(i)))
    {
      return i;
    }
  }

  return -1;
}

function void printHudWeapon(int weaponNumber, int color)
{
  int id = messageIdStart + weaponNumber;
  int x  = 0;
  int step;
  if (weaponCounts[currentSet] < 20)
  {
    step = 0.05;
  }
  else
  {
    step = 0.02;
  }
  int y  = (weaponCounts[currentSet] - 1 - weaponNumber) * step;
  HudMessage(s:getPrintableWeaponName(weaponNumber); HUDMSG_PLAIN, id, color, x, y, MINIMAL_HOLD_TIME);
}

function void SetSelected(void)
{
  int weaponCount = weaponCounts[currentSet];

  for (int s = 0; s < weaponCount; ++s)
  {
    if (checkWeapon(GetWeaponName(s)))
    {
      selectedWeapon = s;
      break;
    }
  }
}

script "ShowWeaponMenu" ENTER
{
  // check if player class is known
  for (int c = 0; c < SETS_NUMBER; ++c)
  {
    if (CheckActorClass(0, playerClassNames[c]))
    {
      currentSet = c;
      break;
    }
  }
  bool menuEnabled = (currentSet != -1);

  if (!menuEnabled)
  {
    log(s:"Weapon Menu: unknown player class: ", s:GetActorClass(0), s:", menu is disabled.");
  }

  int weaponCount = weaponCounts[currentSet];

  if (menuEnabled)
  {
    SetSelected();
  }

  while (menuEnabled)
  {
    if (menuIsOpened)
    {
      // can happen if player drops weapon, or pistol starter script is in action
      if (!CheckInventory(GetWeaponName(selectedWeapon)))
      {
        SetSelected();
      }

      for (int i = 0; i < weaponCount; ++i)
      {
        if (CheckInventory(GetWeaponName(i)))
        {
          printHudWeapon(i, CR_BLUE);
        }
        else
        {
          printHudWeapon(i, CR_GRAY);
        }
      }

      printHudWeapon(selectedWeapon, CR_CYAN);

    }

    Delay(1);
  }
}

script "ToggleWeaponMenu" (void)
{
  ToggleWeaponMenuFunction();
  if (menuIsOpened)
  {
    SetSelected();
  }
}

function void ToggleWeaponMenuFunction(void)
{
  menuIsOpened = !menuIsOpened;

  // on close - select weapon in menu.
  if (!menuIsOpened)
  {
    SetWeaponByNumber(selectedWeapon);
  }
}

script "ScrollNextWeapon" (void)
{
  int weaponCount = weaponCounts[currentSet];

  if (menuIsOpened)
  {
    do
    {
      selectedWeapon += 1;
      if (selectedWeapon >= weaponCount)
      {
        selectedWeapon = 0;
      }
    }
    while (!CheckInventory(GetWeaponName(selectedWeapon)));
  }
  else
  {
    do
    {
      selectedWeapon += 1;
      if (selectedWeapon >= weaponCount)
      {
        selectedWeapon = 0;
      }
    }
    while (!SetWeapon(GetWeaponName(selectedWeapon)));
  }
}

script "ScrollPreviousWeapon" (void)
{
  int weaponCount = weaponCounts[currentSet];

  if (menuIsOpened)
  {
    do
    {
      selectedWeapon -= 1;
      if (selectedWeapon < 0)
      {
        selectedWeapon = weaponCount;
      }
    }
    while (!CheckInventory(GetWeaponName(selectedWeapon)));
  }
  else
  {
    do
    {
      selectedWeapon -= 1;
      if (selectedWeapon < 0)
      {
        selectedWeapon = weaponCount;
      }
    }
    while (!SetWeapon(GetWeaponName(selectedWeapon)));
  }
}

function void SetWeaponByNumber(int weaponNumber)
{
  str weaponName = GetWeaponName(weaponNumber);
  bool success = SetWeapon(weaponName);

  if (!success)
  {
    str printableWeaponName = GetPrintableWeaponName(weaponNumber);
    print(s:printableWeaponName, s:": no ammo.");
  }
}

function void SetSelectedIfAvailable(int newSelected)
{
  if (CheckInventory(GetWeaponName(newSelected)))
  {
    selectedWeapon = newSelected;
  }
}

script "SmartWeaponSelection" (int slotNumber)
{
  if (slotNumber < weaponCounts[currentSet])
  {

    if (!menuIsOpened)
    {
      SetSelectedIfAvailable(getWeaponBySlot(slotNumber));
      ToggleWeaponMenuFunction(); // open menu
    }
    else
    {
      int currentSlot = getWeaponSlot(selectedWeapon);
      bool sameSlot = (slotNumber == currentSlot);

      if (sameSlot)
      {
        int sibling = selectedWeapon;
        do
        {
          sibling = getWeaponSibling(sibling);
        }
        while (sibling != -1 && !CheckInventory(GetWeaponName(sibling)));
        if (sibling != -1)
        {
          selectedWeapon = sibling;
        }
      }
      else
      {
        SetSelectedIfAvailable(getWeaponBySlot(slotNumber));
      }
    }

  }
}
